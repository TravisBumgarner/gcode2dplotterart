"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[877],{5680:(e,n,t)=>{t.d(n,{xA:()=>_,yg:()=>y});var r=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},_=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,_=l(e,["components","mdxType","originalType","parentName"]),d=s(t),u=o,y=d["".concat(c,".").concat(u)]||d[u]||p[u]||i;return t?r.createElement(y,a(a({ref:n},_),{},{components:t})):r.createElement(y,a({ref:n},_))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[d]="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1814:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=t(9668),o=(t(6540),t(5680));const i={description:"Create 256 unique CMYK boxes.",image:"/img/gallery/2025_02_10_256_unique_cmyk_boxes/1.avif"},a="2025-02-10 256 Unique CMYK Boxes",l={unversionedId:"gallery/2025_02_10_256_unique_cmyk_boxes",id:"gallery/2025_02_10_256_unique_cmyk_boxes",title:"2025-02-10 256 Unique CMYK Boxes",description:"Create 256 unique CMYK boxes.",source:"@site/docs/gallery/2025_02_10_256_unique_cmyk_boxes.mdx",sourceDirName:"gallery",slug:"/gallery/2025_02_10_256_unique_cmyk_boxes",permalink:"/gcode2dplotterart/docs/gallery/2025_02_10_256_unique_cmyk_boxes",draft:!1,editUrl:"https://github.com/TravisBumgarner/gcode2dplotterart/tree/main/gcode2dplotterart-website/docs/gallery/2025_02_10_256_unique_cmyk_boxes.mdx",tags:[],version:"current",frontMatter:{description:"Create 256 unique CMYK boxes.",image:"/img/gallery/2025_02_10_256_unique_cmyk_boxes/1.avif"},sidebar:"tutorialSidebar",previous:{title:"2025-02-06 Cascading Triangles",permalink:"/gcode2dplotterart/docs/gallery/2025_02_06_cascading_triangles"},next:{title:"2025-02-10 Juana and Nira",permalink:"/gcode2dplotterart/docs/gallery/2025_02_10_juana_and_nira"}},c={},s=[{value:"Description",id:"description",level:2},{value:"Images",id:"images",level:2},{value:"Plotter Preview",id:"plotter-preview",level:2},{value:"Code",id:"code",level:2}],_={toc:s},d="wrapper";function p(e){let{components:n,...i}=e;return(0,o.yg)(d,(0,r.A)({},_,i,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"2025-02-10-256-unique-cmyk-boxes"},"2025-02-10 256 Unique CMYK Boxes"),(0,o.yg)("h2",{id:"description"},"Description"),(0,o.yg)("p",null,"Create 256 unique CMYK boxes."),(0,o.yg)("h2",{id:"images"},"Images"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"example of plotted code",src:t(9903).A,width:"1995",height:"2000"})),(0,o.yg)("h2",{id:"plotter-preview"},"Plotter Preview"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"preview screenshot",src:t(6897).A,width:"936",height:"852"})),(0,o.yg)("h2",{id:"code"},"Code"),(0,o.yg)("admonition",{type:"warning"},(0,o.yg)("p",{parentName:"admonition"},"This code may or may not run and is intended more as a reference. Additionally, it was most likely not written with the latest version of the library. To ensure compatibility, check the date of this post against the ",(0,o.yg)("a",{parentName:"p",href:"https://pypi.org/project/gcode2dplotterart/#history"},"version history")," and install the corresponding version.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-python"},'from gcode2dplotterart import Plotter3D\nfrom gcode2dplotterart import experimental_photo_utils\nimport random\nimport math\n\nX_MIN = 0\nX_MAX = 170\nY_MIN = 70\nY_MAX = 230\nZ_PLOTTING_HEIGHT = 0\nZ_NAVIGATION_HEIGHT = 4\n\nMAX_WIDTH = X_MAX - X_MIN\nMAX_HEIGHT = Y_MAX - Y_MIN\n\nplotter = Plotter3D(\n    title="Unique Boxes",\n    x_min=X_MIN,\n    x_max=X_MAX,\n    y_min=Y_MIN,\n    y_max=Y_MAX,\n    z_plotting_height=Z_PLOTTING_HEIGHT,\n    z_navigation_height=Z_NAVIGATION_HEIGHT,\n    feed_rate=10_000,  # Default feed rate\n    output_directory="./output",\n    handle_out_of_bounds="Warning",  # Warn if points are out of bounds\n)\n\nLAYERS = [\n    {\n        "title": "cyan",\n        "color": "#00ffff",\n        "line_width": 1,\n    },\n    {\n        "title": "magenta",\n        "color": "#ff00ff",\n        "line_width": 1,\n    },\n    {\n        "title": "yellow",\n        "color": "#ffff00",\n        "line_width": 1,\n    },\n    {\n        "title": "black",\n        "color": "#000000",\n        "line_width": 1,\n    },\n]\nCOLORS = [layer[\'title\'] for layer in LAYERS]\n\nfor layer in LAYERS:\n    plotter.add_layer(\n        layer["title"], color=layer["color"], line_width=layer["line_width"]\n    )\n\ndef draw_box(x, y, width, height, color1, color2, color3, color4):\n    plotter.layers[color1].add_line(X_MIN + x, Y_MIN + y, X_MIN + x + width, Y_MIN + y,)\n    plotter.layers[color2].add_line(X_MIN + x + width, Y_MIN + y, X_MIN + x + width, Y_MIN + y + height,)\n    plotter.layers[color3].add_line(X_MIN + x + width, Y_MIN + y + height, X_MIN + x, Y_MIN + y + height,)\n    plotter.layers[color4].add_line(X_MIN + x, Y_MIN + y + height, X_MIN + x, Y_MIN + y,)\n\n\ndef generate_colors():\n    return [\n        random.choice(COLORS) for _ in range(0,3)\n    ]\n\nSIDE_LENGTH = 7\n\ndef generate_all_color_combinations():\n    """Generate all possible unique combinations of 4 colors for a square\'s sides"""\n    all_combinations = []\n    for c1 in COLORS:\n        for c2 in COLORS:\n            for c3 in COLORS:\n                for c4 in COLORS:\n                    all_combinations.append((c1, c2, c3, c4))\n    random.shuffle(all_combinations)\n    return all_combinations\n\ndef main():\n    # Get all possible color combinations\n    all_combinations = generate_all_color_combinations()\n    print(len(all_combinations))\n    \n    # Calculate grid layout\n    box_count = len(all_combinations)  # Will be 256 (4^4)\n    grid_size = math.ceil(math.sqrt(box_count))\n    \n    # Calculate box spacing to fit all boxes\n    spacing = SIDE_LENGTH + 3  # Add 5 units of padding between boxes\n    \n    for idx, colors in enumerate(all_combinations):\n        # Calculate grid position\n        row = idx // grid_size\n        col = idx % grid_size\n        \n        # Calculate box position\n        x = col * spacing\n        y = row * spacing\n        \n        # Draw box with current color combination\n        draw_box(x, y, SIDE_LENGTH, SIDE_LENGTH, *colors)\n\nif __name__ == "__main__":\n    main()\n\nplotter.preview()\nplotter.save()\n')))}p.isMDXComponent=!0},9903:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/1-b82e570016394e08df3c7bc697084049.avif"},6897:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/preview-1685090a2cf11bbad6e218659db7634c.png"}}]);