"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7180],{723:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/2-47d24695bdba1ad22e8547f6cee918f1.avif"},1626:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/1-ab507c024097d6ba98f2a6e0a3dd7f7c.avif"},3200:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>_,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"gallery/2025_02_14_circles","title":"2025-02-14 Circles","description":"Sample lightness/darkness sections of an image. Use those values to then plot circles of varying diameters.","source":"@site/docs/gallery/2025_02_14_circles.mdx","sourceDirName":"gallery","slug":"/gallery/2025_02_14_circles","permalink":"/gcode2dplotterart/docs/gallery/2025_02_14_circles","draft":false,"unlisted":false,"editUrl":"https://github.com/TravisBumgarner/gcode2dplotterart/tree/main/gcode2dplotterart-website/docs/gallery/2025_02_14_circles.mdx","tags":[],"version":"current","frontMatter":{"description":"Sample lightness/darkness sections of an image. Use those values to then plot circles of varying diameters.","image":"/img/gallery/2025_02_14_circles/1.avif"},"sidebar":"tutorialSidebar","previous":{"title":"2025-02-10 Juana and Nira","permalink":"/gcode2dplotterart/docs/gallery/2025_02_10_juana_and_nira"},"next":{"title":"API","permalink":"/gcode2dplotterart/docs/category/api"}}');var r=i(4848),a=i(8453);const o={description:"Sample lightness/darkness sections of an image. Use those values to then plot circles of varying diameters.",image:"/img/gallery/2025_02_14_circles/1.avif"},s="2025-02-14 Circles",l={},c=[{value:"Description",id:"description",level:2},{value:"Images",id:"images",level:2},{value:"Plotter Preview",id:"plotter-preview",level:2},{value:"Code",id:"code",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"2025-02-14-circles",children:"2025-02-14 Circles"})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"Sample lightness/darkness sections of an image. Use those values to then plot circles of varying diameters."}),"\n",(0,r.jsx)(n.h2,{id:"images",children:"Images"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.img,{alt:"example of plotted code",src:i(1626).A+"",width:"2000",height:"1335"}),"\n",(0,r.jsx)(n.img,{alt:"example of plotted code",src:i(723).A+"",width:"1993",height:"2000"}),"\n",(0,r.jsx)(n.img,{alt:"example of plotted code",src:i(8041).A+"",width:"1129",height:"570"})]}),"\n",(0,r.jsx)(n.h2,{id:"plotter-preview",children:"Plotter Preview"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"preview screenshot",src:i(6054).A+"",width:"1420",height:"1336"})}),"\n",(0,r.jsx)(n.h2,{id:"code",children:"Code"}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["This code may or may not run and is intended more as a reference. Additionally, it was most likely not written with the latest version of the library. To ensure compatibility, check the date of this post against the ",(0,r.jsx)(n.a,{href:"https://pypi.org/project/gcode2dplotterart/#history",children:"version history"})," and install the corresponding version."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from gcode2dplotterart import Plotter3D\nfrom gcode2dplotterart import experimental_photo_utils\n\nX_MIN = 0\nX_MAX = 170\nY_MIN = 70\nY_MAX = 230\nZ_PLOTTING_HEIGHT = 0\nZ_NAVIGATION_HEIGHT = 1\nlayer = {\n    "title": "red_4",\n    "color": "#dd3031",\n    "line_width": 0.4,\n}\n\nMAX_WIDTH = X_MAX - X_MIN\nMAX_HEIGHT = Y_MAX - Y_MIN\n\n# Take in an image, such as size 1000x1000. Sample a 5px square for example, \n# which results in 200x200 grid. Then we can draw 200x200 circles at diameter 1 each.#\nSAMPLE_LENGTH = 10\nOUTPUT_DIAMETER = 2\n\nRADIUS_MAPPING = [\n    0.9 * OUTPUT_DIAMETER / 2,\n    0.7 * OUTPUT_DIAMETER / 2,\n    0.5 * OUTPUT_DIAMETER / 2,\n    0.3 * OUTPUT_DIAMETER / 2,\n    0.1 * OUTPUT_DIAMETER / 2\n]\n\n\nplotter = Plotter3D(\n    title="Circles",\n    x_min=X_MIN,\n    x_max=X_MAX,\n    y_min=Y_MIN,\n    y_max=Y_MAX,\n    z_plotting_height=Z_PLOTTING_HEIGHT,\n    z_navigation_height=Z_NAVIGATION_HEIGHT,\n    feed_rate=10_000,  \n    output_directory="./output",\n    handle_out_of_bounds="Warning",  \n)\n\nplotter.add_layer(\n    layer["title"], color=layer["color"], line_width=layer["line_width"]\n)\n\nimage_path = "./1.jpg" \n\nimage = experimental_photo_utils.load_image(image_path)\n\n# Calculate number of circles that will fit in each dimension\ncircles_width = MAX_WIDTH / OUTPUT_DIAMETER\ncircles_height = MAX_HEIGHT / OUTPUT_DIAMETER\n\n# Resize image to match the number of samples we\'ll take\nimage = experimental_photo_utils.resize_image(\n    image, \n    int(circles_width * SAMPLE_LENGTH), \n    int(circles_height * SAMPLE_LENGTH)\n)\n# Convert image to float32 before processing to prevent overflow\nimage = image.astype(\'float32\')\nimage = experimental_photo_utils.grayscale_image(image, method="average")\nimage = experimental_photo_utils.buck_image_even_histogram_distribution(\n    image, layer_count=len(RADIUS_MAPPING), preview=False\n)\n\ndef are_all_pixels_in_bounds(row_index, col_index):\n    for i in range(int(row_index), int(row_index + SAMPLE_LENGTH)):\n        for j in range(int(col_index), int(col_index + SAMPLE_LENGTH)):\n            if i < 0 or i >= image.shape[0] or j < 0 or j >= image.shape[1]:\n                return False\n    return True\n\ndef average_area(row_index, col_index):\n    if not are_all_pixels_in_bounds(row_index, col_index):\n        return -1\n    \n    total_area = 0\n    count = 0\n    for i in range(int(row_index), int(row_index + SAMPLE_LENGTH)):\n        for j in range(int(col_index), int(col_index + SAMPLE_LENGTH)):\n            total_area += image[i, j]\n            count += 1\n    return int(total_area / count)\n\nfor row_index in range(0, image.shape[0], SAMPLE_LENGTH):\n    # Don\'t print last row\n    if row_index > image.shape[0] - SAMPLE_LENGTH:\n        break\n\n    for col_index in range(0, image.shape[1], SAMPLE_LENGTH):\n        # Don\'t print last column\n        if col_index > image.shape[1] - SAMPLE_LENGTH:\n            break\n\n        radius = RADIUS_MAPPING[average_area(row_index, col_index)]\n        if radius == -1:\n            continue\n        \n        # Start with the outer radius and draw concentric circles inward\n        current_radius = radius\n        while current_radius > 0:\n            plotter.layers[\'red_4\'].add_circle(\n                x_center=X_MIN + (col_index / SAMPLE_LENGTH) * OUTPUT_DIAMETER,\n                y_center=Y_MIN + (row_index / SAMPLE_LENGTH) * OUTPUT_DIAMETER,\n                radius=current_radius)\n            current_radius -= layer[\'line_width\']\n        \nplotter.preview()\nplotter.save()\n'})})]})}function _(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},6054:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/preview-bf0b6398bf83fb70cd85f60be3c26e6e.png"},8041:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/0-be286e44ad6e18761f26a464dd2eb043.avif"},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>s});var t=i(6540);const r={},a=t.createContext(r);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);