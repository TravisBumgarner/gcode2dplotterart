"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2939],{1967:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/1-6c9238bd6c42ae08c2372414e10715da.avif"},3249:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/preview-e17e36e22860d2ac8b6d9623be802ad4.png"},7421:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>_,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"gallery/2025_02_06_cascading_triangles","title":"2025-02-06 Cascading Triangles","description":"Triangles all from the same origin, moving consistently to the right but randomly up or down.","source":"@site/docs/gallery/2025_02_06_cascading_triangles.mdx","sourceDirName":"gallery","slug":"/gallery/2025_02_06_cascading_triangles","permalink":"/gcode2dplotterart/docs/gallery/2025_02_06_cascading_triangles","draft":false,"unlisted":false,"editUrl":"https://github.com/TravisBumgarner/gcode2dplotterart/tree/main/gcode2dplotterart-website/docs/gallery/2025_02_06_cascading_triangles.mdx","tags":[],"version":"current","frontMatter":{"description":"Triangles all from the same origin, moving consistently to the right but randomly up or down.","image":"/img/gallery/2025_02_06_cascading_triangles/1.avif"},"sidebar":"tutorialSidebar","previous":{"title":"2025-01-18 Diagonal Lines","permalink":"/gcode2dplotterart/docs/gallery/2025_01_18_diagonal_lines"},"next":{"title":"2025-02-10 256 Unique CMYK Boxes","permalink":"/gcode2dplotterart/docs/gallery/2025_02_10_256_unique_cmyk_boxes"}}');var r=t(4848),o=t(8453);const a={description:"Triangles all from the same origin, moving consistently to the right but randomly up or down.",image:"/img/gallery/2025_02_06_cascading_triangles/1.avif"},l="2025-02-06 Cascading Triangles",s={},d=[{value:"Description",id:"description",level:2},{value:"Images",id:"images",level:2},{value:"Plotter Preview",id:"plotter-preview",level:2},{value:"Code",id:"code",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"2025-02-06-cascading-triangles",children:"2025-02-06 Cascading Triangles"})}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"Triangles all from the same origin, moving consistently to the right but randomly up or down."}),"\n",(0,r.jsx)(n.h2,{id:"images",children:"Images"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"example of plotted code",src:t(1967).A+"",width:"2000",height:"1538"})}),"\n",(0,r.jsx)(n.h2,{id:"plotter-preview",children:"Plotter Preview"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"preview screenshot",src:t(3249).A+"",width:"904",height:"886"})}),"\n",(0,r.jsx)(n.h2,{id:"code",children:"Code"}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["This code may or may not run and is intended more as a reference. Additionally, it was most likely not written with the latest version of the library. To ensure compatibility, check the date of this post against the ",(0,r.jsx)(n.a,{href:"https://pypi.org/project/gcode2dplotterart/#history",children:"version history"})," and install the corresponding version."]})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from gcode2dplotterart import Plotter3D\nimport random\nCOLORS = [\n    {\n        "title": "blue",\n        "color": "#0000FF",\n        "line_width": 1.0,\n    },\n    {\n        "title": "yellow",\n        "color": "#FFFF00",\n        "line_width": 1.0,\n    },\n    {\n        "title": "red",\n        "color": "#FF0000",\n        "line_width": 1.0,\n    },\n]\n\nX_MIN = 0\nX_MAX = 180\nY_MIN = 50\nY_MAX = 240\nZ_PLOTTING_HEIGHT = 0\nZ_NAVIGATION_HEIGHT = 4\n\n# Initialize the plotter\nplotter = Plotter3D(\n    title="Generative Triangles",\n    x_min=X_MIN,\n    x_max=X_MAX,\n    y_min=Y_MIN,\n    y_max=Y_MAX,\n    z_plotting_height=Z_PLOTTING_HEIGHT,\n    z_navigation_height=Z_NAVIGATION_HEIGHT,\n    feed_rate=10_000,  # Default feed rate\n    output_directory="./output",\n    handle_out_of_bounds="Warning",  # Warn if points are out of bounds\n)\n\nfor color in COLORS:\n    plotter.add_layer(\n        title=color["title"],\n        color=color["color"],\n        line_width=1.0,\n    )\n\n\ndef calculate_slope(start, end):\n    return (end[1] - start[1]) / (end[0] - start[0])\n\ndef equation_of_a_line(start, end, x):\n    return calculate_slope(start, end) * (x - start[0]) + start[1]\n\ndef in_plotting_area(point):\n    return X_MIN <= point[0] <= X_MAX and Y_MIN <= point[1] <= Y_MAX\n\ndef plot_cluster(start, side_length):\n    end_1 = (start[0] + side_length, start[1] + side_length)\n    end_2 = (start[0] - side_length, start[1] + side_length)\n    random_color = random.choice(COLORS)\n    plotter.layers[random_color["title"]].add_line(X_MIN + start[0], start[1], X_MIN + end_1[0], end_1[1])\n    plotter.layers[random_color["title"]].add_line(X_MIN + start[0], start[1], X_MIN + end_2[0], end_2[1])\n\n    for i in range(0, side_length + 1, side_length // 2):\n        x1 = start[0] + i\n        x2 = start[0] - i\n        y1 = equation_of_a_line(start, end_1, x1)\n        y2 = equation_of_a_line(start, end_2, x2)\n\n        plotter.layers[random_color["title"]].add_line(x1, y1, x2, y2)\n\n    available_points = [(x1, y1), (x2, y2)]\n    available_points = [point for point in available_points if in_plotting_area(point)]\n    if len(available_points) == 0:\n        return []\n\n    return [random.choice(available_points)]\n        \ndef main(start):\n    counter = 0\n    points_seen = set()\n    points = [start]\n    side_length = 2\n    layer = 1\n    while counter < 48:\n        try:\n            start = points.pop(0)\n        except IndexError:\n            print(\'out of bounds entirely\')\n            return\n        if start in points_seen:\n            continue\n        points_seen.add(start)\n        new_points = plot_cluster(start, side_length)\n        points += new_points\n        counter += 1\n        if counter == layer ** 2:\n            print(f\'layer {layer}\')\n            layer += 1\n            side_length += 1\n\nfor i in range(0, 20):\n    main((X_MIN + X_MAX / 2, Y_MIN))\n\nplotter.preview()\n\nplotter.save()\n\n'})})]})}function _(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(6540);const r={},o=i.createContext(r);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);