"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[975],{5680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>u});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},_="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),_=p(n),g=a,u=_["".concat(s,".").concat(g)]||_[g]||d[g]||i;return n?r.createElement(u,o(o({ref:t},c),{},{components:n})):r.createElement(u,o({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[_]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3868:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(9668),a=(n(6540),n(5680));const i={description:"Map all the pixels in an image to a few distinct colors. Turn clusters of the same color into horizontal lines.",image:"/img/gallery/2025_02_10_juana_and_nira/1.avif"},o="2025-02-10 Juana and Nira",l={unversionedId:"gallery/2025_02_10_juana_and_nira",id:"gallery/2025_02_10_juana_and_nira",title:"2025-02-10 Juana and Nira",description:"Map all the pixels in an image to a few distinct colors. Turn clusters of the same color into horizontal lines.",source:"@site/docs/gallery/2025_02_10_juana_and_nira.mdx",sourceDirName:"gallery",slug:"/gallery/2025_02_10_juana_and_nira",permalink:"/gcode2dplotterart/docs/gallery/2025_02_10_juana_and_nira",draft:!1,editUrl:"https://github.com/TravisBumgarner/gcode2dplotterart/tree/main/gcode2dplotterart-website/docs/gallery/2025_02_10_juana_and_nira.mdx",tags:[],version:"current",frontMatter:{description:"Map all the pixels in an image to a few distinct colors. Turn clusters of the same color into horizontal lines.",image:"/img/gallery/2025_02_10_juana_and_nira/1.avif"},sidebar:"tutorialSidebar",previous:{title:"2025-02-10 256 Unique CMYK Boxes",permalink:"/gcode2dplotterart/docs/gallery/2025_02_10_256_unique_cmyk_boxes"},next:{title:"2025-02-14 Circles",permalink:"/gcode2dplotterart/docs/gallery/2025_02_14_circles"}},s={},p=[{value:"Description",id:"description",level:2},{value:"Images",id:"images",level:2},{value:"Plotter Preview",id:"plotter-preview",level:2},{value:"Code",id:"code",level:2}],c={toc:p},_="wrapper";function d(e){let{components:t,...i}=e;return(0,a.yg)(_,(0,r.A)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"2025-02-10-juana-and-nira"},"2025-02-10 Juana and Nira"),(0,a.yg)("h2",{id:"description"},"Description"),(0,a.yg)("p",null,"Map all the pixels in an image to a few distinct colors. Turn clusters of the same color into horizontal lines. "),(0,a.yg)("h2",{id:"images"},"Images"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"example of plotted code",src:n(2033).A,width:"2000",height:"1635"}),"\n",(0,a.yg)("img",{alt:"example of plotted code",src:n(6492).A,width:"2000",height:"1664"})),(0,a.yg)("h2",{id:"plotter-preview"},"Plotter Preview"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"preview screenshot",src:n(866).A,width:"1322",height:"1166"}),"\n",(0,a.yg)("img",{alt:"preview screenshot",src:n(9334).A,width:"920",height:"874"})),(0,a.yg)("h2",{id:"code"},"Code"),(0,a.yg)("admonition",{type:"warning"},(0,a.yg)("p",{parentName:"admonition"},"This code may or may not run and is intended more as a reference. Additionally, it was most likely not written with the latest version of the library. To ensure compatibility, check the date of this post against the ",(0,a.yg)("a",{parentName:"p",href:"https://pypi.org/project/gcode2dplotterart/#history"},"version history")," and install the corresponding version.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'from gcode2dplotterart import Plotter3D\nfrom gcode2dplotterart import experimental_photo_utils\n\nimport math\n\nX_MIN = 0\nX_MAX = 170\nY_MIN = 70\nY_MAX = 230\nZ_PLOTTING_HEIGHT = 0\nZ_NAVIGATION_HEIGHT = 4\n\nMAX_WIDTH = X_MAX - X_MIN\nMAX_HEIGHT = Y_MAX - Y_MIN\n\nplotter = Plotter3D(\n    title="Dogs",\n    x_min=X_MIN,\n    x_max=X_MAX,\n    y_min=Y_MIN,\n    y_max=Y_MAX,\n    z_plotting_height=Z_PLOTTING_HEIGHT,\n    z_navigation_height=Z_NAVIGATION_HEIGHT,\n    feed_rate=10_000,  \n    output_directory="./output",\n    handle_out_of_bounds="Warning",  \n)\n\nLAYERS = [\n    {\n        "title": "black_1",\n        "color": "#252e2b",\n        "line_width": 1,\n    },\n    {\n        "title": "blue_40",\n        "color": "#3b65c1",\n        "line_width": 1,\n    },\n    {\n        "title": "purple_33",\n        "color": "#8e3392",\n        "line_width": 1,\n    },\n    {\n        "title": "orange_7",\n        "color": "#e76500",\n        "line_width": 1,\n    },\n    {\n        "title": "yellow_11",\n        "color": "#e0c200",\n        "line_width": 1,\n    },\n]\nfor layer in LAYERS:\n    plotter.add_layer(\n        layer["title"], color=layer["color"], line_width=layer["line_width"]\n    )\n\nimage_path = "./inputs/2.jpg" #Juana\n# image_path = "./inputs/3.jpg" # Nira\n\nimage = experimental_photo_utils.load_image(image_path)\nimage = experimental_photo_utils.resize_image(image, MAX_WIDTH, MAX_HEIGHT)\n# Convert image to float32 before grayscale conversion to prevent overflow, this is probably worth research.\nimage = image.astype("float32")\nimage = experimental_photo_utils.grayscale_image(image, method="average")\nimage = experimental_photo_utils.buck_image_even_histogram_distribution(\n    image, layer_count=len(LAYERS), preview=True\n)\n\nrows, cols = image.shape[:2]\n\nfor row_index, row in enumerate(image):\n    current_layer = LAYERS[row[0]]["title"]\n\n    path_start = (0, row_index)\n\n    for point_index, point in enumerate(row):\n        point_layer = LAYERS[point]["title"]\n        if point_layer == current_layer:\n            continue\n        else:\n            path_end = (point_index, row_index)\n            plotter.layers[current_layer].add_line(\n                x_start=X_MIN + path_start[0],\n                y_start=Y_MIN + path_start[1],\n                x_end=X_MIN + path_end[0],\n                y_end=Y_MIN + path_end[1],\n            )\n            path_start = (point_index, row_index)\n            current_layer = point_layer\n\n    plotter.layers[current_layer].add_line(\n        x_start=X_MIN + path_start[0],\n        y_start=Y_MIN + path_start[1],\n        x_end=X_MIN + cols,\n        y_end=Y_MIN + path_start[1],\n    )\n\n\nplotter.preview()\nplotter.save()\n')))}d.isMDXComponent=!0},2033:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/1-bed6ac8e82a95961ebae176e0d3fa7a6.avif"},6492:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/2-60279abbc54d332798d3531fe80973ae.avif"},866:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/preview1-40410253d61f4effb41f194bb2d6f2c9.png"},9334:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/preview2-ab5c7dd116eb55fc282df30813dae094.png"}}]);