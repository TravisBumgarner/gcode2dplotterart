"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[677],{8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>s});var o=n(6540);const r={},i=o.createContext(r);function l(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),o.createElement(i.Provider,{value:t},e.children)}},8776:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"api/Plotter2D","title":"Plotter2D","description":"Plotter2D is a 2D plotter for creating artwork using G-code. This class should be used with a 2D plotter.","source":"@site/docs/api/Plotter2D.mdx","sourceDirName":"api","slug":"/api/Plotter2D","permalink":"/gcode2dplotterart/docs/api/Plotter2D","draft":false,"unlisted":false,"editUrl":"https://github.com/TravisBumgarner/gcode2dplotterart/tree/main/gcode2dplotterart-website/docs/api/Plotter2D.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Layer3D","permalink":"/gcode2dplotterart/docs/api/Layer3D"},"next":{"title":"Plotter3D","permalink":"/gcode2dplotterart/docs/api/Plotter3D"}}');var r=n(4848),i=n(8453);const l={},s="Plotter2D",d={},a=[{value:"<strong>init</strong>",id:"init",level:2},{value:"add_layer",id:"add_layer",level:2},{value:"get_min_and_max_points",id:"get_min_and_max_points",level:2},{value:"get_plotting_data",id:"get_plotting_data",level:2},{value:"is_point_in_bounds",id:"is_point_in_bounds",level:2},{value:"preview",id:"preview",level:2},{value:"save",id:"save",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"plotter2d",children:"Plotter2D"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"Plotter2D"})," is a 2D plotter for creating artwork using G-code. This class should be used with a 2D plotter."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"Plotter2D"})," extends from the abstract class ",(0,r.jsx)(t.code,{children:"Plotter"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"init",children:(0,r.jsx)(t.strong,{children:"init"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"__init__(\nself, title: str, x_min: float, x_max: float, y_min: float, y_max: float, feed_rate: float, handle_out_of_bounds: Union[Literal['Warning'], Literal['Error']] = 'Warning', output_directory: str = './output', include_comments: bool = True, return_home_before_plotting: bool = True )\n ->  None\n"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Args:"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"title (str) : The title of the work of art."}),"\n",(0,r.jsx)(t.li,{children:"x_min (float) : The minimum X-coordinate of the plotter."}),"\n",(0,r.jsx)(t.li,{children:"y_min (float) : The minimum Y-coordinate of the plotter."}),"\n",(0,r.jsx)(t.li,{children:"x_max (float) : The maximum X-coordinate of the plotter."}),"\n",(0,r.jsx)(t.li,{children:"y_max (float) : The maximum Y-coordinate of the plotter."}),"\n",(0,r.jsxs)(t.li,{children:["feed_rate (float) : The ",(0,r.jsx)(t.a,{href:"https://travisbumgarner.github.io/gcode2dplotterart/docs/documentation/terminology#feed-rate",children:"feed rate"}),", for the plotter."]}),"\n",(0,r.jsxs)(t.li,{children:["handle_out_of_bounds (",(0,r.jsx)(t.code,{children:"Warning"})," | ",(0,r.jsx)(t.code,{children:"Error"}),", optional):             How to handle out-of-bounds points.             ",(0,r.jsx)(t.code,{children:"Warning"})," will print a warning, skip the point, and continue.             ",(0,r.jsx)(t.code,{children:"Error"})," will throw an error and stop.             Defaults to ",(0,r.jsx)(t.code,{children:"Warning"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["output_directory (str, optional) : The directory where G-code files will be saved. Defaults to ",(0,r.jsx)(t.code,{children:"./output"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["include_comments (bool, optional) : Whether to include comments in the G-Code files. Useful for learning about G-Code and debugging.\nDefaults to ",(0,r.jsx)(t.code,{children:"True"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["return_home_before_plotting (bool, optional) : Whether to return the plotter to the home position before plotting. Defaults to ",(0,r.jsx)(t.code,{children:"True"}),".             Can cause issues if plotter doesn't support returning to the home position."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"add_layer",children:"add_layer"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"add_layer(\nself, title: str, color: Optional[str] = None, line_width: float = 2.0, preview_only: bool = False )\n ->  gcode2dplotterart.layer.Layer2D.Layer2D\n"})}),"\n",(0,r.jsx)(t.p,{children:"Add a new layer to the plotter."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Args:"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"title (str) : The title of the layer. Used when saving a layer to G-Code."}),"\n",(0,r.jsxs)(t.li,{children:["color (str) : A hex color (such as ",(0,r.jsx)(t.code,{children:"#00FF00"}),") or human-readable color name\n(see ",(0,r.jsx)(t.a,{href:"https://matplotlib.org/stable/gallery/color/named_colors.html#css-colors",children:"MatplotLib"}),"\nfor a list of colors). Used with the ",(0,r.jsx)(t.code,{children:"preview"})," method. Defaults to a random color if not provided."]}),"\n",(0,r.jsxs)(t.li,{children:["line_width (Optional[float]) : The width of the line to be plotted. Used with the ",(0,r.jsx)(t.code,{children:"preview"})," method. Defaults to",(0,r.jsx)(t.code,{children:"2.0"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["preview_only (bool) : Whether the layer is a preview layer. Preview layers show the\nplotter head in motion but do not come in contact with\n",(0,r.jsx)(t.a,{href:"https://travisbumgarner.github.io/gcode2dplotterart/docs/documentation/terminology#feed-rate",children:"plotting surface"}),". Defaults to ",(0,r.jsx)(t.code,{children:"False"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Layer : The newly created ",(0,r.jsx)(t.a,{href:"https://travisbumgarner.github.io/gcode2dplotterart/docs/documentation/terminology#layer",children:"layer"}),".\nAllows for chaining of the layer's add methods."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"get_min_and_max_points",children:"get_min_and_max_points"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"get_min_and_max_points(\nself )\n ->  Dict[Literal['x_min', 'y_min', 'x_max', 'y_max'], float]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Find the min and max plot points of the plotter."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"dict : x_min (float), y_min (float), x_max (float), y_max (float)\nA dictionary containing the min and max plot points of the plotter."}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"get_plotting_data",children:"get_plotting_data"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"get_plotting_data(\nself )\n ->  Dict[str, Dict[str, List[str]]]\n"})}),"\n",(0,r.jsx)(t.p,{children:"Get current plotting data."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:['dict: "layer" : "setup": [], "plotting": [], "teardown": []\nA dictionary of dictionaries containing\n',(0,r.jsx)(t.a,{href:"https://travisbumgarner.github.io/gcode2dplotterart/docs/documentation/terminology#instruction-phase",children:"instruction phases"})," - setup, plotting,\nand teardown as an array of G-Code instruction strings per layer. Mostly used for testing purposes."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"is_point_in_bounds",children:"is_point_in_bounds"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"is_point_in_bounds(\nself, x: float, y: float )\n ->  bool\n"})}),"\n",(0,r.jsx)(t.p,{children:"Whether the point to be plotted is within the plotter bounds."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Args:"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"x (float) : The x-coordinate of the point to be plotted."}),"\n",(0,r.jsx)(t.li,{children:"y (float) : The y-coordinate of the point to be plotted."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"bool : Whether the point to be plotted is within the plotter bounds."}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"preview",children:"preview"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"preview(\nself, show_entire_plotting_area: bool = True )\n ->  None\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Generate a preview image of the plotter's layers. Layers will be plotted in the order they've been added to the ",(0,r.jsx)(t.code,{children:"Plotter"}),".\nOnly looks at instructions during the ",(0,r.jsx)(t.code,{children:"plotting"})," phase."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Args:"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["show_entire_plotting_area (bool, optional): Whether to show the entire plotting area or just the\nsize of the art to be plotted. Defaults to ",(0,r.jsx)(t.code,{children:"True"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"save",children:"save"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"save(\nself, clear_output_before_save: bool = True, include_layer_number: bool = True )\n ->  None\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Save all the layers to the output directory defined by the ",(0,r.jsx)(t.code,{children:"output_directory"})," Plotter param. Each layer will be\nsaved as an individual file with the filename defined by ",(0,r.jsx)(t.code,{children:"{layer_number}_{layer_title}.gcode"}),"."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Args:"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["clear_output_before_save (bool, optional): Whether to remove all files from the artwork output directory\n(defined as ",(0,r.jsx)(t.code,{children:"[output_directory]/[title]"}),") before saving. Defaults to ",(0,r.jsx)(t.code,{children:"True"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["include_layer_number (bool, optional): Whether to prepend filename with ",(0,r.jsx)(t.code,{children:"layer_number"}),". Defaults to ",(0,r.jsx)(t.code,{children:"True"}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);