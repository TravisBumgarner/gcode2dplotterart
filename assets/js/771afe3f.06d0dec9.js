"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[939],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>u});var r=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},_=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(t),_=i,u=p["".concat(s,".").concat(_)]||p[_]||g[_]||a;return t?r.createElement(u,o(o({ref:n},c),{},{components:t})):r.createElement(u,o({ref:n},c))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=_;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var d=2;d<a;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}_.displayName="MDXCreateElement"},8254:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=t(9668),i=(t(6540),t(5680));const a={description:"Triangles all from the same origin, moving consistently to the right but randomly up or down.",image:"/img/gallery/2025_02_06_cascading_triangles/1.avif"},o="2025-02-06 Cascading Triangles",l={unversionedId:"gallery/2025_02_06_cascading_triangles",id:"gallery/2025_02_06_cascading_triangles",title:"2025-02-06 Cascading Triangles",description:"Triangles all from the same origin, moving consistently to the right but randomly up or down.",source:"@site/docs/gallery/2025_02_06_cascading_triangles.mdx",sourceDirName:"gallery",slug:"/gallery/2025_02_06_cascading_triangles",permalink:"/gcode2dplotterart/docs/gallery/2025_02_06_cascading_triangles",draft:!1,editUrl:"https://github.com/TravisBumgarner/gcode2dplotterart/tree/main/gcode2dplotterart-website/docs/gallery/2025_02_06_cascading_triangles.mdx",tags:[],version:"current",frontMatter:{description:"Triangles all from the same origin, moving consistently to the right but randomly up or down.",image:"/img/gallery/2025_02_06_cascading_triangles/1.avif"},sidebar:"tutorialSidebar",previous:{title:"2025-01-18 Diagonal Lines",permalink:"/gcode2dplotterart/docs/gallery/2025_01_18_diagonal_lines"},next:{title:"2025-02-10 256 Unique CMYK Boxes",permalink:"/gcode2dplotterart/docs/gallery/2025_02_10_256_unique_cmyk_boxes"}},s={},d=[{value:"Description",id:"description",level:2},{value:"Images",id:"images",level:2},{value:"Plotter Preview",id:"plotter-preview",level:2},{value:"Code",id:"code",level:2}],c={toc:d},p="wrapper";function g(e){let{components:n,...a}=e;return(0,i.yg)(p,(0,r.A)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"2025-02-06-cascading-triangles"},"2025-02-06 Cascading Triangles"),(0,i.yg)("h2",{id:"description"},"Description"),(0,i.yg)("p",null,"Triangles all from the same origin, moving consistently to the right but randomly up or down."),(0,i.yg)("h2",{id:"images"},"Images"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"example of plotted code",src:t(1967).A,width:"2000",height:"1538"})),(0,i.yg)("h2",{id:"plotter-preview"},"Plotter Preview"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"preview screenshot",src:t(3249).A,width:"904",height:"886"})),(0,i.yg)("h2",{id:"code"},"Code"),(0,i.yg)("admonition",{type:"warning"},(0,i.yg)("p",{parentName:"admonition"},"This code may or may not run and is intended more as a reference. Additionally, it was most likely not written with the latest version of the library. To ensure compatibility, check the date of this post against the ",(0,i.yg)("a",{parentName:"p",href:"https://pypi.org/project/gcode2dplotterart/#history"},"version history")," and install the corresponding version.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'from gcode2dplotterart import Plotter3D\nimport random\nCOLORS = [\n    {\n        "title": "blue",\n        "color": "#0000FF",\n        "line_width": 1.0,\n    },\n    {\n        "title": "yellow",\n        "color": "#FFFF00",\n        "line_width": 1.0,\n    },\n    {\n        "title": "red",\n        "color": "#FF0000",\n        "line_width": 1.0,\n    },\n]\n\nX_MIN = 0\nX_MAX = 180\nY_MIN = 50\nY_MAX = 240\nZ_PLOTTING_HEIGHT = 0\nZ_NAVIGATION_HEIGHT = 4\n\n# Initialize the plotter\nplotter = Plotter3D(\n    title="Generative Triangles",\n    x_min=X_MIN,\n    x_max=X_MAX,\n    y_min=Y_MIN,\n    y_max=Y_MAX,\n    z_plotting_height=Z_PLOTTING_HEIGHT,\n    z_navigation_height=Z_NAVIGATION_HEIGHT,\n    feed_rate=10_000,  # Default feed rate\n    output_directory="./output",\n    handle_out_of_bounds="Warning",  # Warn if points are out of bounds\n)\n\nfor color in COLORS:\n    plotter.add_layer(\n        title=color["title"],\n        color=color["color"],\n        line_width=1.0,\n    )\n\n\ndef calculate_slope(start, end):\n    return (end[1] - start[1]) / (end[0] - start[0])\n\ndef equation_of_a_line(start, end, x):\n    return calculate_slope(start, end) * (x - start[0]) + start[1]\n\ndef in_plotting_area(point):\n    return X_MIN <= point[0] <= X_MAX and Y_MIN <= point[1] <= Y_MAX\n\ndef plot_cluster(start, side_length):\n    end_1 = (start[0] + side_length, start[1] + side_length)\n    end_2 = (start[0] - side_length, start[1] + side_length)\n    random_color = random.choice(COLORS)\n    plotter.layers[random_color["title"]].add_line(X_MIN + start[0], start[1], X_MIN + end_1[0], end_1[1])\n    plotter.layers[random_color["title"]].add_line(X_MIN + start[0], start[1], X_MIN + end_2[0], end_2[1])\n\n    for i in range(0, side_length + 1, side_length // 2):\n        x1 = start[0] + i\n        x2 = start[0] - i\n        y1 = equation_of_a_line(start, end_1, x1)\n        y2 = equation_of_a_line(start, end_2, x2)\n\n        plotter.layers[random_color["title"]].add_line(x1, y1, x2, y2)\n\n    available_points = [(x1, y1), (x2, y2)]\n    available_points = [point for point in available_points if in_plotting_area(point)]\n    if len(available_points) == 0:\n        return []\n\n    return [random.choice(available_points)]\n        \ndef main(start):\n    counter = 0\n    points_seen = set()\n    points = [start]\n    side_length = 2\n    layer = 1\n    while counter < 48:\n        try:\n            start = points.pop(0)\n        except IndexError:\n            print(\'out of bounds entirely\')\n            return\n        if start in points_seen:\n            continue\n        points_seen.add(start)\n        new_points = plot_cluster(start, side_length)\n        points += new_points\n        counter += 1\n        if counter == layer ** 2:\n            print(f\'layer {layer}\')\n            layer += 1\n            side_length += 1\n\nfor i in range(0, 20):\n    main((X_MIN + X_MAX / 2, Y_MIN))\n\nplotter.preview()\n\nplotter.save()\n\n')))}g.isMDXComponent=!0},1967:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/1-6c9238bd6c42ae08c2372414e10715da.avif"},3249:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/preview-e17e36e22860d2ac8b6d9623be802ad4.png"}}]);