"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3975],{866:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/preview1-40410253d61f4effb41f194bb2d6f2c9.png"},2033:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/1-bed6ac8e82a95961ebae176e0d3fa7a6.avif"},5748:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"gallery/2025_02_10_juana_and_nira","title":"2025-02-10 Juana and Nira","description":"Map all the pixels in an image to a few distinct colors. Turn clusters of the same color into horizontal lines.","source":"@site/docs/gallery/2025_02_10_juana_and_nira.mdx","sourceDirName":"gallery","slug":"/gallery/2025_02_10_juana_and_nira","permalink":"/gcode2dplotterart/docs/gallery/2025_02_10_juana_and_nira","draft":false,"unlisted":false,"editUrl":"https://github.com/TravisBumgarner/gcode2dplotterart/tree/main/gcode2dplotterart-website/docs/gallery/2025_02_10_juana_and_nira.mdx","tags":[],"version":"current","frontMatter":{"description":"Map all the pixels in an image to a few distinct colors. Turn clusters of the same color into horizontal lines.","image":"/img/gallery/2025_02_10_juana_and_nira/1.avif"},"sidebar":"tutorialSidebar","previous":{"title":"2025-02-10 256 Unique CMYK Boxes","permalink":"/gcode2dplotterart/docs/gallery/2025_02_10_256_unique_cmyk_boxes"},"next":{"title":"2025-02-14 Circles","permalink":"/gcode2dplotterart/docs/gallery/2025_02_14_circles"}}');var i=t(4848),r=t(8453);const o={description:"Map all the pixels in an image to a few distinct colors. Turn clusters of the same color into horizontal lines.",image:"/img/gallery/2025_02_10_juana_and_nira/1.avif"},l="2025-02-10 Juana and Nira",s={},d=[{value:"Description",id:"description",level:2},{value:"Images",id:"images",level:2},{value:"Plotter Preview",id:"plotter-preview",level:2},{value:"Code",id:"code",level:2}];function _(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"2025-02-10-juana-and-nira",children:"2025-02-10 Juana and Nira"})}),"\n",(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"Map all the pixels in an image to a few distinct colors. Turn clusters of the same color into horizontal lines."}),"\n",(0,i.jsx)(n.h2,{id:"images",children:"Images"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.img,{alt:"example of plotted code",src:t(2033).A+"",width:"2000",height:"1635"}),"\n",(0,i.jsx)(n.img,{alt:"example of plotted code",src:t(6492).A+"",width:"2000",height:"1664"})]}),"\n",(0,i.jsx)(n.h2,{id:"plotter-preview",children:"Plotter Preview"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.img,{alt:"preview screenshot",src:t(866).A+"",width:"1322",height:"1166"}),"\n",(0,i.jsx)(n.img,{alt:"preview screenshot",src:t(6953).A+"",width:"920",height:"874"})]}),"\n",(0,i.jsx)(n.h2,{id:"code",children:"Code"}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["This code may or may not run and is intended more as a reference. Additionally, it was most likely not written with the latest version of the library. To ensure compatibility, check the date of this post against the ",(0,i.jsx)(n.a,{href:"https://pypi.org/project/gcode2dplotterart/#history",children:"version history"})," and install the corresponding version."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from gcode2dplotterart import Plotter3D\nfrom gcode2dplotterart import experimental_photo_utils\n\nimport math\n\nX_MIN = 0\nX_MAX = 170\nY_MIN = 70\nY_MAX = 230\nZ_PLOTTING_HEIGHT = 0\nZ_NAVIGATION_HEIGHT = 4\n\nMAX_WIDTH = X_MAX - X_MIN\nMAX_HEIGHT = Y_MAX - Y_MIN\n\nplotter = Plotter3D(\n    title="Dogs",\n    x_min=X_MIN,\n    x_max=X_MAX,\n    y_min=Y_MIN,\n    y_max=Y_MAX,\n    z_plotting_height=Z_PLOTTING_HEIGHT,\n    z_navigation_height=Z_NAVIGATION_HEIGHT,\n    feed_rate=10_000,  \n    output_directory="./output",\n    handle_out_of_bounds="Warning",  \n)\n\nLAYERS = [\n    {\n        "title": "black_1",\n        "color": "#252e2b",\n        "line_width": 1,\n    },\n    {\n        "title": "blue_40",\n        "color": "#3b65c1",\n        "line_width": 1,\n    },\n    {\n        "title": "purple_33",\n        "color": "#8e3392",\n        "line_width": 1,\n    },\n    {\n        "title": "orange_7",\n        "color": "#e76500",\n        "line_width": 1,\n    },\n    {\n        "title": "yellow_11",\n        "color": "#e0c200",\n        "line_width": 1,\n    },\n]\nfor layer in LAYERS:\n    plotter.add_layer(\n        layer["title"], color=layer["color"], line_width=layer["line_width"]\n    )\n\nimage_path = "./inputs/2.jpg" #Juana\n# image_path = "./inputs/3.jpg" # Nira\n\nimage = experimental_photo_utils.load_image(image_path)\nimage = experimental_photo_utils.resize_image(image, MAX_WIDTH, MAX_HEIGHT)\n# Convert image to float32 before grayscale conversion to prevent overflow, this is probably worth research.\nimage = image.astype("float32")\nimage = experimental_photo_utils.grayscale_image(image, method="average")\nimage = experimental_photo_utils.buck_image_even_histogram_distribution(\n    image, layer_count=len(LAYERS), preview=True\n)\n\nrows, cols = image.shape[:2]\n\nfor row_index, row in enumerate(image):\n    current_layer = LAYERS[row[0]]["title"]\n\n    path_start = (0, row_index)\n\n    for point_index, point in enumerate(row):\n        point_layer = LAYERS[point]["title"]\n        if point_layer == current_layer:\n            continue\n        else:\n            path_end = (point_index, row_index)\n            plotter.layers[current_layer].add_line(\n                x_start=X_MIN + path_start[0],\n                y_start=Y_MIN + path_start[1],\n                x_end=X_MIN + path_end[0],\n                y_end=Y_MIN + path_end[1],\n            )\n            path_start = (point_index, row_index)\n            current_layer = point_layer\n\n    plotter.layers[current_layer].add_line(\n        x_start=X_MIN + path_start[0],\n        y_start=Y_MIN + path_start[1],\n        x_end=X_MIN + cols,\n        y_end=Y_MIN + path_start[1],\n    )\n\n\nplotter.preview()\nplotter.save()\n'})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(_,{...e})}):_(e)}},6492:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/2-60279abbc54d332798d3531fe80973ae.avif"},6953:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/preview2-ab5c7dd116eb55fc282df30813dae094.png"},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var a=t(6540);const i={},r=a.createContext(i);function o(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);