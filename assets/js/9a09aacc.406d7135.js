"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[880],{5680:(e,r,t)=>{t.d(r,{xA:()=>d,yg:()=>m});var n=t(6540);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),c=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},d=function(e){var r=c(e.components);return n.createElement(s.Provider,{value:r},e.children)},_="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},g=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),_=c(t),g=o,m=_["".concat(s,".").concat(g)]||_[g]||p[g]||a;return t?n.createElement(m,l(l({ref:r},d),{},{components:t})):n.createElement(m,l({ref:r},d))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=g;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i[_]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=t[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}g.displayName="MDXCreateElement"},8687:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var n=t(9668),o=(t(6540),t(5680));const a={description:"An homage to Josef Albers, recursively.",image:"/img/gallery/2023-11-28_josef_albers_recursive_homage/example1.jpg"},l="2023-11-28 Josef Albers Recursive Homage",i={unversionedId:"gallery/2023-11-28_josef_albers_recursive_homage",id:"gallery/2023-11-28_josef_albers_recursive_homage",title:"2023-11-28 Josef Albers Recursive Homage",description:"An homage to Josef Albers, recursively.",source:"@site/docs/gallery/2023-11-28_josef_albers_recursive_homage.mdx",sourceDirName:"gallery",slug:"/gallery/2023-11-28_josef_albers_recursive_homage",permalink:"/gcode2dplotterart/docs/gallery/2023-11-28_josef_albers_recursive_homage",draft:!1,editUrl:"https://github.com/TravisBumgarner/gcode2dplotterart/tree/main/gcode2dplotterart-website/docs/gallery/2023-11-28_josef_albers_recursive_homage.mdx",tags:[],version:"current",frontMatter:{description:"An homage to Josef Albers, recursively.",image:"/img/gallery/2023-11-28_josef_albers_recursive_homage/example1.jpg"},sidebar:"tutorialSidebar",previous:{title:"2023-11-25 Bubbles",permalink:"/gcode2dplotterart/docs/gallery/2023-11-25_Bubbles"},next:{title:"2023-12-06 Happy Little Accident",permalink:"/gcode2dplotterart/docs/gallery/2023-12-06_happy_little_accident"}},s={},c=[{value:"Description",id:"description",level:2},{value:"Images",id:"images",level:2},{value:"Plotter Preview",id:"plotter-preview",level:2},{value:"Code",id:"code",level:2}],d={toc:c},_="wrapper";function p(e){let{components:r,...a}=e;return(0,o.yg)(_,(0,n.A)({},d,a,{components:r,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"2023-11-28-josef-albers-recursive-homage"},"2023-11-28 Josef Albers Recursive Homage"),(0,o.yg)("h2",{id:"description"},"Description"),(0,o.yg)("p",null,"An homage to Josef Albers, recursively."),(0,o.yg)("h2",{id:"images"},"Images"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"example of plotted code",src:t(3401).A,width:"2000",height:"1494"})),(0,o.yg)("h2",{id:"plotter-preview"},"Plotter Preview"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"preview screenshot",src:t(8316).A,width:"640",height:"480"})),(0,o.yg)("h2",{id:"code"},"Code"),(0,o.yg)("admonition",{type:"warning"},(0,o.yg)("p",{parentName:"admonition"},"This code may or may not run and is intended more as a reference. Additionally, it was most likely not written with the latest version of the library. To ensure compatibility, check the date of this post against the ",(0,o.yg)("a",{parentName:"p",href:"https://pypi.org/project/gcode2dplotterart/#history"},"version history")," and install the corresponding version.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-python"},'from gcode2dplotterart import Plotter2D\nfrom random import randrange, shuffle\nimport math\n\n\nLINE_WIDTH = 2.5\n\nCOLORS = [\n    {"title": "color1", "color": "darkslategrey"},\n    {"title": "color2", "color": "silver"},\n    {"title": "color3", "color": "cornsilk"},\n    {"title": "color4", "color": "tan"},\n]\n\nplotter = Plotter2D(\n    title="Josef Albers Homage",\n    x_min=0,\n    x_max=250,\n    y_min=0,\n    y_max=180,\n    feed_rate=10000,\n)\n\nDONT_PLOT_LAYER = {\n    "title": "DONT PLOT",\n    "color": "#FFFFFF",\n    "line_width": LINE_WIDTH,\n}\nplotter.add_layer(**DONT_PLOT_LAYER)\n\nfor color in COLORS:\n    plotter.add_layer(\n        title=color["title"],\n        color=color["color"],\n        line_width=LINE_WIDTH,\n    )\n\n# Should be less than 100 so that the last square can be one later on.\nSIDE_LENGTH_PERCENTAGE_CHOICES = [i / 100 for i in range(10, 99, 20)]\n\n\ndef josef_albers(x_min: float, y_min: float, side_length: float):\n    colors = COLORS.copy()\n\n    # Append some number of white layers.\n    for i in range(randrange(0, 3)):\n        colors.append(DONT_PLOT_LAYER)\n\n    shuffle(colors)\n\n    side_padding = LINE_WIDTH * 5\n    x_center = x_min + side_length / 2\n    y_center = randrange(\n        int(y_min + side_padding), int(y_min + side_length - side_padding)\n    )\n\n    vertical_angle = math.degrees(math.atan(int(side_length / 2) / (y_center - y_min)))\n\n    shuffle(SIDE_LENGTH_PERCENTAGE_CHOICES)\n    square_side_length_percentages = SIDE_LENGTH_PERCENTAGE_CHOICES[: len(colors) - 1]\n    square_side_length_percentages.append(1)\n\n    square_side_lengths = sorted(\n        [int(side_length * percentage) for percentage in square_side_length_percentages]\n    )\n\n    current_side_length = LINE_WIDTH\n    for index, color in enumerate(colors):\n        threshold_side_length = square_side_lengths[index]\n\n        while current_side_length < threshold_side_length:\n            x_left_of_center = current_side_length / 2\n            y_below_center = x_left_of_center / math.tan(math.radians(vertical_angle))\n            x_start = x_center - x_left_of_center\n            y_start = y_center - y_below_center\n\n            x_end = x_start + current_side_length\n            y_end = y_start + current_side_length\n\n            plotter.layers[color["title"]].add_rectangle(\n                x_start=x_start,\n                y_start=y_start,\n                x_end=x_end,\n                y_end=y_end,\n            )\n\n            current_side_length += LINE_WIDTH\n\n\nSIDE_LENGTH = 50\n\nfor x in range(0, plotter.width - SIDE_LENGTH, SIDE_LENGTH + 5):\n    for y in range(0, plotter.height - SIDE_LENGTH, SIDE_LENGTH + 5):\n        josef_albers(x, y, SIDE_LENGTH)\n\nplotter.preview()\nplotter.save()\n')))}p.isMDXComponent=!0},3401:(e,r,t)=>{t.d(r,{A:()=>n});const n=t.p+"assets/images/example1-bbd2c441c64c12a9d53e9ac9c478d133.jpg"},8316:(e,r,t)=>{t.d(r,{A:()=>n});const n=t.p+"assets/images/preview-695dd0887e515decd37ce026602b22c5.png"}}]);