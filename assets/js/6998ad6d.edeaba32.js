"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2066],{2540:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"documentation/gcode","title":"G-Code Overview","description":"What is G-Code","source":"@site/docs/documentation/gcode.mdx","sourceDirName":"documentation","slug":"/documentation/gcode","permalink":"/gcode2dplotterart/docs/documentation/gcode","draft":false,"unlisted":false,"editUrl":"https://github.com/TravisBumgarner/gcode2dplotterart/tree/main/gcode2dplotterart-website/docs/documentation/gcode.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Convert a 3D printer to a 2D plotter","permalink":"/gcode2dplotterart/docs/documentation/convert-3d-to-2d"},"next":{"title":"Coding Tips","permalink":"/gcode2dplotterart/docs/documentation/code_tips"}}');var o=t(4848),r=t(8453);const d={sidebar_position:3},s="G-Code Overview",a={},c=[{value:"What is G-Code",id:"what-is-g-code",level:2},{value:"Library Instructions",id:"library-instructions",level:2},{value:"Comment",id:"comment",level:3},{value:"F",id:"f",level:3},{value:"G1",id:"g1",level:3},{value:"G4",id:"g4",level:3},{value:"G21",id:"g21",level:3},{value:"G28",id:"g28",level:3},{value:"M2",id:"m2",level:3},{value:"M3",id:"m3",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"g-code-overview",children:"G-Code Overview"})}),"\n",(0,o.jsx)(n.h2,{id:"what-is-g-code",children:"What is G-Code"}),"\n",(0,o.jsx)(n.p,{children:"G-Code is the programming language of 2D plotters and 3D printers. It is a lower level programming language and therefore is typically difficult to understand. Below is a snippet of code to plot a rectangle. This library aims to abstract away these instructions so that more user friendly code, such as Python, can be used instead to generate G-Code. For more information on G"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-gcode",children:"G21\nF10000\nM3 S0\nG1 X0.000 Y-50.000 F10000\nM3 S1000\nG04 P0.25\nG1 X0.000 Y0.000 F10000\nG1 X50.000 Y0.000 F10000\nG1 X50.000 Y-50.000 F10000\nM3 S0\nG04 P0.25\nM2\n"})}),"\n",(0,o.jsx)(n.h2,{id:"library-instructions",children:"Library Instructions"}),"\n",(0,o.jsxs)(n.p,{children:["Below are a collection of all the instructions used in this library. For a more thorough explanation, ",(0,o.jsx)(n.a,{href:"https://reprap.org/wiki/G-code",children:"RepRap"})," and ",(0,o.jsx)(n.a,{href:"https://marlinfw.org/meta/gcode/",children:"Marlin"})," are great (and dense) resources."]}),"\n",(0,o.jsxs)(n.p,{children:["The square braces indicate a variable that can be passed to the specific G-Code instructions. For example the instruction ",(0,o.jsx)(n.code,{children:"G1 X[x] Y[y]"})," takes in variables ",(0,o.jsx)(n.code,{children:"x"})," and ",(0,o.jsx)(n.code,{children:"y"}),", which could result in a G-Code instruction looking like ",(0,o.jsx)(n.code,{children:"G1 X10.0 Y5.0"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"comment",children:"Comment"}),"\n",(0,o.jsxs)(n.p,{children:["Add a comment with a line starting with ",(0,o.jsx)(n.code,{children:";"}),". This instruction is not read by the plotting device."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-gcode",children:";The following instruction lifts the pen up.\nM3 S0\n"})}),"\n",(0,o.jsx)(n.h3,{id:"f",children:"F"}),"\n",(0,o.jsxs)(n.p,{children:["Set the movement speed ",(0,o.jsx)(n.code,{children:"f"})," of the plotting device with ",(0,o.jsx)(n.code,{children:"F[f]"}),". Can also be attached to individual ",(0,o.jsx)(n.a,{href:"#g1",children:"G1"})," commands."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-gcode",children:"F10000\n"})}),"\n",(0,o.jsx)(n.h3,{id:"g1",children:"G1"}),"\n",(0,o.jsxs)(n.p,{children:["Move the plotting device to the specified ",(0,o.jsx)(n.code,{children:"x"})," and ",(0,o.jsx)(n.code,{children:"y"})," and ",(0,o.jsx)(n.code,{children:"z"})," coordinates at a speed of ",(0,o.jsx)(n.code,{children:"f"})," with ",(0,o.jsx)(n.code,{children:"G1 X[x] Y[y] Z[z] F[f]"}),". Not all of the coordinates are required."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-gcode",children:"G1 X0.000 Y0.000 F10000\nG1 X50.000 F10000\nG1 Z10 F10000\nG1 X50.000 Y-50.000 F10000\n"})}),"\n",(0,o.jsx)(n.h3,{id:"g4",children:"G4"}),"\n",(0,o.jsxs)(n.p,{children:["Pause for a period of time ",(0,o.jsx)(n.code,{children:"p"})," with ",(0,o.jsx)(n.code,{children:"G4 P[p]"}),". This command is useful in combination with a move command. A pause after moving will give the plotting device a chance to stop any vibrating that might impact the plotting quality."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-gcode",children:"; Lower plotter head\nM3 S1000\n; Pause for 0.25 seconds\nG4 P0.25\n;Point: 59.84807753012208, -48.2635182233307\nG1 X59.848 Y-48.264 F10000\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-gcode",children:"G20\n"})}),"\n",(0,o.jsx)(n.h3,{id:"g21",children:"G21"}),"\n",(0,o.jsxs)(n.p,{children:["Sets the units of measurements to ",(0,o.jsx)(n.code,{children:"mm"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-gcode",children:"G21\n"})}),"\n",(0,o.jsx)(n.h3,{id:"g28",children:"G28"}),"\n",(0,o.jsx)(n.p,{children:"Home the plotting device. Will return the plotter to X = 0, Y = 0 and if supported, Z = 0. Not all plotting devices support this command."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-gcode",children:"G28\n"})}),"\n",(0,o.jsx)(n.h3,{id:"m2",children:"M2"}),"\n",(0,o.jsx)(n.p,{children:"Marks the end of the program execution."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-gcode",children:"M2\n"})}),"\n",(0,o.jsx)(n.h3,{id:"m3",children:"M3"}),"\n",(0,o.jsxs)(n.p,{children:["For 2D plotters, used to raise and lower the plotter head. ",(0,o.jsx)(n.code,{children:"M3 S0"})," will raise the print and ",(0,o.jsx)(n.code,{children:"M3 S1000"})," will lower the plotter head."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-gcode",children:"; Raise plotter head\nM3 S0\n; Move to first coordinate\nG1 X0.000 Y0.000 F10000\n; Lower the plotter head\nM3 S1000\n; Draw two lines\nG1 X50.000 Y0.000 F10000\nG1 X50.000 Y-50.000 F10000\n; Raise the plotter head on a 2D plotter, A `G1` command with `Z` height would be used here for a 3D printer.\nM3 S0\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>s});var i=t(6540);const o={},r=i.createContext(o);function d(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);