"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9120],{3628:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>g,frontMatter:()=>c,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"gallery/2023-11-24_concentric_circles","title":"2023-11-24 Concentric Circles","description":"Plot circles in a 2D grid where each row contains a donut of a single color and each column contains a circle enclosed in the donut of a single color. The result is a grid containing the unique combination of every color pair.","source":"@site/docs/gallery/2023-11-24_concentric_circles.mdx","sourceDirName":"gallery","slug":"/gallery/2023-11-24_concentric_circles","permalink":"/gcode2dplotterart/docs/gallery/2023-11-24_concentric_circles","draft":false,"unlisted":false,"editUrl":"https://github.com/TravisBumgarner/gcode2dplotterart/tree/main/gcode2dplotterart-website/docs/gallery/2023-11-24_concentric_circles.mdx","tags":[],"version":"current","frontMatter":{"description":"Plot circles in a 2D grid where each row contains a donut of a single color and each column contains a circle enclosed in the donut of a single color. The result is a grid containing the unique combination of every color pair.","image":"/img/gallery/2023-11-24_concentric_circles/example1.jpg"},"sidebar":"tutorialSidebar","previous":{"title":"2023-11-19 Wandering Lines","permalink":"/gcode2dplotterart/docs/gallery/2023-11-19_wandering_lines"},"next":{"title":"2023-11-24 Josef Albers Homage","permalink":"/gcode2dplotterart/docs/gallery/2023-11-24_josef_albers_homage"}}');var i=r(4848),t=r(8453);const c={description:"Plot circles in a 2D grid where each row contains a donut of a single color and each column contains a circle enclosed in the donut of a single color. The result is a grid containing the unique combination of every color pair.",image:"/img/gallery/2023-11-24_concentric_circles/example1.jpg"},l="2023-11-24 Concentric Circles",a={},d=[{value:"Description",id:"description",level:2},{value:"Images",id:"images",level:2},{value:"Plotter Preview",id:"plotter-preview",level:2},{value:"Code",id:"code",level:2}];function s(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"2023-11-24-concentric-circles",children:"2023-11-24 Concentric Circles"})}),"\n",(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsx)(n.p,{children:"Plot circles in a 2D grid where each row contains a donut of a single color and each column contains a circle enclosed in the donut of a single color. The result is a grid containing the unique combination of every color pair."}),"\n",(0,i.jsx)(n.h2,{id:"images",children:"Images"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"example of plotted code",src:r(7269).A+"",width:"1589",height:"1600"})}),"\n",(0,i.jsx)(n.h2,{id:"plotter-preview",children:"Plotter Preview"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"preview screenshot",src:r(7112).A+"",width:"1504",height:"1312"})}),"\n",(0,i.jsx)(n.h2,{id:"code",children:"Code"}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["This code may or may not run and is intended more as a reference. Additionally, it was most likely not written with the latest version of the library. To ensure compatibility, check the date of this post against the ",(0,i.jsx)(n.a,{href:"https://pypi.org/project/gcode2dplotterart/#history",children:"version history"})," and install the corresponding version."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'from gcode2dplotterart import Plotter2D\n\nLINE_WIDTH = 1.0\n\nCOLORS = [\n    {"title": "1_red1", "color": "#FF4141"},\n    {"title": "2_orange1", "color": "#FF7700"},\n    {"title": "3_yellow1", "color": "#FFDB11"},\n    {"title": "4_green1", "color": "#A9FF00"},\n    {"title": "5_green2", "color": "#00E350"},\n    {"title": "6_blue1", "color": "#A2FFF8"},\n    {"title": "7_blue2", "color": "#0024FF"},\n    {"title": "8_blue3", "color": "#5D9DB4"},\n    {"title": "9_pink1", "color": "#FF91D2"},\n    {"title": "a_pink2", "color": "#FF0096"},\n    {"title": "b_purple1", "color": "#EABEFF"},\n    {"title": "c_purple2", "color": "#AD00FF"},\n    {"title": "d_grey1", "color": "#E9E9E9"},\n    {"title": "e_grey2", "color": "#B1B1B1"},\n    {"title": "f_grey3", "color": "#1E1E1E"},\n]\n\n# Create a plotter object\nplotter = Plotter2D(\n    title="Circles",\n    x_min=0,\n    x_max=290,\n    y_min=0,\n    y_max=210,\n    feed_rate=10000,\n)\n\nfor color in COLORS:\n    for ground in ["foreground", "background"]:\n        plotter.add_layer(\n            title=f"{ground}_{color[\'title\']}",\n            color=color["color"],\n            line_width=LINE_WIDTH,\n        )\n\nPLOTTER_CONSTRAINT = min(plotter.width, plotter.height)\n\nbounding_box = PLOTTER_CONSTRAINT / len(COLORS)\nradius = (bounding_box / 2) - 2  # Add a little padding\n\nINNER_CIRCLE_RADIUS = radius * 0.5\n\nprint\n\nfor foreground_index in range(len(COLORS)):\n    for background_index in range(len(COLORS)):\n        # Experimenting below with adding fill.\n\n        # offset centers so they\'re not on edge of plotter\n        foreground_offset = foreground_index + 0.5\n        background_offset = background_index + 0.5\n\n        remaining_radius = radius\n        print(remaining_radius)\n        while remaining_radius > INNER_CIRCLE_RADIUS:\n            plotter.layers[\n                "background_" + COLORS[background_index]["title"]\n            ].add_circle(\n                x_center=bounding_box * foreground_offset,\n                y_center=bounding_box * background_offset,\n                radius=remaining_radius,\n            )\n            remaining_radius -= LINE_WIDTH\n\n        while remaining_radius > 0:\n            layer = (\n                "foreground_" + COLORS[foreground_index]["title"]\n                if foreground_index != background_index\n                else "background_" + COLORS[background_index]["title"]\n            )\n            plotter.layers[layer].add_circle(\n                x_center=bounding_box * foreground_offset,\n                y_center=bounding_box * background_offset,\n                radius=remaining_radius,\n            )\n            remaining_radius -= LINE_WIDTH\n        print(remaining_radius)\n\nplotter.preview()\n\nplotter.save(include_layer_number=False)\n'})})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(s,{...e})}):s(e)}},7112:(e,n,r)=>{r.d(n,{A:()=>o});const o=r.p+"assets/images/preview-2df03b2ddad4c29f095ee26b1f066f58.png"},7269:(e,n,r)=>{r.d(n,{A:()=>o});const o=r.p+"assets/images/example1-406194de156a5c36734a4c6020106c18.jpg"},8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>l});var o=r(6540);const i={},t=o.createContext(i);function c(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);