"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[180],{5680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>m});var r=t(6540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},_="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),_=c(t),g=i,m=_["".concat(s,".").concat(g)]||_[g]||p[g]||a;return t?r.createElement(m,o(o({ref:n},d),{},{components:t})):r.createElement(m,o({ref:n},d))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[_]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},3585:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(9668),i=(t(6540),t(5680));const a={description:"Sample lightness/darkness sections of an image. Use those values to then plot circles of varying diameters.",image:"/img/gallery/2025_02_14_circles/1.avif"},o="2025-02-14 Circles",l={unversionedId:"gallery/2025_02_14_circles",id:"gallery/2025_02_14_circles",title:"2025-02-14 Circles",description:"Sample lightness/darkness sections of an image. Use those values to then plot circles of varying diameters.",source:"@site/docs/gallery/2025_02_14_circles.mdx",sourceDirName:"gallery",slug:"/gallery/2025_02_14_circles",permalink:"/gcode2dplotterart/docs/gallery/2025_02_14_circles",draft:!1,editUrl:"https://github.com/TravisBumgarner/gcode2dplotterart/tree/main/gcode2dplotterart-website/docs/gallery/2025_02_14_circles.mdx",tags:[],version:"current",frontMatter:{description:"Sample lightness/darkness sections of an image. Use those values to then plot circles of varying diameters.",image:"/img/gallery/2025_02_14_circles/1.avif"},sidebar:"tutorialSidebar",previous:{title:"2025-02-10 Juana and Nira",permalink:"/gcode2dplotterart/docs/gallery/2025_02_10_juana_and_nira"},next:{title:"API",permalink:"/gcode2dplotterart/docs/category/api"}},s={},c=[{value:"Description",id:"description",level:2},{value:"Images",id:"images",level:2},{value:"Plotter Preview",id:"plotter-preview",level:2},{value:"Code",id:"code",level:2}],d={toc:c},_="wrapper";function p(e){let{components:n,...a}=e;return(0,i.yg)(_,(0,r.A)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"2025-02-14-circles"},"2025-02-14 Circles"),(0,i.yg)("h2",{id:"description"},"Description"),(0,i.yg)("p",null," Sample lightness/darkness sections of an image. Use those values to then plot circles of varying diameters."),(0,i.yg)("h2",{id:"images"},"Images"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"example of plotted code",src:t(1626).A,width:"2000",height:"1335"}),"\n",(0,i.yg)("img",{alt:"example of plotted code",src:t(723).A,width:"1993",height:"2000"}),"\n",(0,i.yg)("img",{alt:"example of plotted code",src:t(8041).A,width:"1129",height:"570"})),(0,i.yg)("h2",{id:"plotter-preview"},"Plotter Preview"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"preview screenshot",src:t(6054).A,width:"1420",height:"1336"})),(0,i.yg)("h2",{id:"code"},"Code"),(0,i.yg)("admonition",{type:"warning"},(0,i.yg)("p",{parentName:"admonition"},"This code may or may not run and is intended more as a reference. Additionally, it was most likely not written with the latest version of the library. To ensure compatibility, check the date of this post against the ",(0,i.yg)("a",{parentName:"p",href:"https://pypi.org/project/gcode2dplotterart/#history"},"version history")," and install the corresponding version.")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'from gcode2dplotterart import Plotter3D\nfrom gcode2dplotterart import experimental_photo_utils\n\nX_MIN = 0\nX_MAX = 170\nY_MIN = 70\nY_MAX = 230\nZ_PLOTTING_HEIGHT = 0\nZ_NAVIGATION_HEIGHT = 1\nlayer = {\n    "title": "red_4",\n    "color": "#dd3031",\n    "line_width": 0.4,\n}\n\nMAX_WIDTH = X_MAX - X_MIN\nMAX_HEIGHT = Y_MAX - Y_MIN\n\n# Take in an image, such as size 1000x1000. Sample a 5px square for example, \n# which results in 200x200 grid. Then we can draw 200x200 circles at diameter 1 each.#\nSAMPLE_LENGTH = 10\nOUTPUT_DIAMETER = 2\n\nRADIUS_MAPPING = [\n    0.9 * OUTPUT_DIAMETER / 2,\n    0.7 * OUTPUT_DIAMETER / 2,\n    0.5 * OUTPUT_DIAMETER / 2,\n    0.3 * OUTPUT_DIAMETER / 2,\n    0.1 * OUTPUT_DIAMETER / 2\n]\n\n\nplotter = Plotter3D(\n    title="Circles",\n    x_min=X_MIN,\n    x_max=X_MAX,\n    y_min=Y_MIN,\n    y_max=Y_MAX,\n    z_plotting_height=Z_PLOTTING_HEIGHT,\n    z_navigation_height=Z_NAVIGATION_HEIGHT,\n    feed_rate=10_000,  \n    output_directory="./output",\n    handle_out_of_bounds="Warning",  \n)\n\nplotter.add_layer(\n    layer["title"], color=layer["color"], line_width=layer["line_width"]\n)\n\nimage_path = "./1.jpg" \n\nimage = experimental_photo_utils.load_image(image_path)\n\n# Calculate number of circles that will fit in each dimension\ncircles_width = MAX_WIDTH / OUTPUT_DIAMETER\ncircles_height = MAX_HEIGHT / OUTPUT_DIAMETER\n\n# Resize image to match the number of samples we\'ll take\nimage = experimental_photo_utils.resize_image(\n    image, \n    int(circles_width * SAMPLE_LENGTH), \n    int(circles_height * SAMPLE_LENGTH)\n)\n# Convert image to float32 before processing to prevent overflow\nimage = image.astype(\'float32\')\nimage = experimental_photo_utils.grayscale_image(image, method="average")\nimage = experimental_photo_utils.buck_image_even_histogram_distribution(\n    image, layer_count=len(RADIUS_MAPPING), preview=False\n)\n\ndef are_all_pixels_in_bounds(row_index, col_index):\n    for i in range(int(row_index), int(row_index + SAMPLE_LENGTH)):\n        for j in range(int(col_index), int(col_index + SAMPLE_LENGTH)):\n            if i < 0 or i >= image.shape[0] or j < 0 or j >= image.shape[1]:\n                return False\n    return True\n\ndef average_area(row_index, col_index):\n    if not are_all_pixels_in_bounds(row_index, col_index):\n        return -1\n    \n    total_area = 0\n    count = 0\n    for i in range(int(row_index), int(row_index + SAMPLE_LENGTH)):\n        for j in range(int(col_index), int(col_index + SAMPLE_LENGTH)):\n            total_area += image[i, j]\n            count += 1\n    return int(total_area / count)\n\nfor row_index in range(0, image.shape[0], SAMPLE_LENGTH):\n    # Don\'t print last row\n    if row_index > image.shape[0] - SAMPLE_LENGTH:\n        break\n\n    for col_index in range(0, image.shape[1], SAMPLE_LENGTH):\n        # Don\'t print last column\n        if col_index > image.shape[1] - SAMPLE_LENGTH:\n            break\n\n        radius = RADIUS_MAPPING[average_area(row_index, col_index)]\n        if radius == -1:\n            continue\n        \n        # Start with the outer radius and draw concentric circles inward\n        current_radius = radius\n        while current_radius > 0:\n            plotter.layers[\'red_4\'].add_circle(\n                x_center=X_MIN + (col_index / SAMPLE_LENGTH) * OUTPUT_DIAMETER,\n                y_center=Y_MIN + (row_index / SAMPLE_LENGTH) * OUTPUT_DIAMETER,\n                radius=current_radius)\n            current_radius -= layer[\'line_width\']\n        \nplotter.preview()\nplotter.save()\n')))}p.isMDXComponent=!0},8041:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/0-be286e44ad6e18761f26a464dd2eb043.avif"},1626:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/1-ab507c024097d6ba98f2a6e0a3dd7f7c.avif"},723:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/2-47d24695bdba1ad22e8547f6cee918f1.avif"},6054:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/preview-bf0b6398bf83fb70cd85f60be3c26e6e.png"}}]);