"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[161],{5680:(e,t,r)=>{r.d(t,{xA:()=>p,yg:()=>_});var n=r(6540);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(r),m=o,_=d["".concat(s,".").concat(m)]||d[m]||g[m]||a;return r?n.createElement(_,l(l({ref:t},p),{},{components:r})):n.createElement(_,l({ref:t},p))}));function _(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5244:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var n=r(9668),o=(r(6540),r(5680));const a={description:"An homage to Josef Albers",image:"/img/gallery/2023-11-24_josef_albers_homage/example1.jpg"},l="2023-11-24 Josef Albers Homage",i={unversionedId:"gallery/2023-11-24_josef_albers_homage",id:"gallery/2023-11-24_josef_albers_homage",title:"2023-11-24 Josef Albers Homage",description:"An homage to Josef Albers",source:"@site/docs/gallery/2023-11-24_josef_albers_homage.mdx",sourceDirName:"gallery",slug:"/gallery/2023-11-24_josef_albers_homage",permalink:"/gcode2dplotterart/docs/gallery/2023-11-24_josef_albers_homage",draft:!1,editUrl:"https://github.com/TravisBumgarner/gcode2dplotterart/tree/main/gcode2dplotterart-website/docs/gallery/2023-11-24_josef_albers_homage.mdx",tags:[],version:"current",frontMatter:{description:"An homage to Josef Albers",image:"/img/gallery/2023-11-24_josef_albers_homage/example1.jpg"},sidebar:"tutorialSidebar",previous:{title:"2023-11-24 Concentric Circles",permalink:"/gcode2dplotterart/docs/gallery/2023-11-24_concentric_circles"},next:{title:"2023-11-25 Bubbles",permalink:"/gcode2dplotterart/docs/gallery/2023-11-25_Bubbles"}},s={},c=[{value:"Description",id:"description",level:2},{value:"Images",id:"images",level:2},{value:"Plotter Preview",id:"plotter-preview",level:2},{value:"Code",id:"code",level:2}],p={toc:c},d="wrapper";function g(e){let{components:t,...a}=e;return(0,o.yg)(d,(0,n.A)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"2023-11-24-josef-albers-homage"},"2023-11-24 Josef Albers Homage"),(0,o.yg)("h2",{id:"description"},"Description"),(0,o.yg)("p",null,"An homage to Josef Albers"),(0,o.yg)("h2",{id:"images"},"Images"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"example of plotted code",src:r(9380).A,width:"1600",height:"1572"}),"\n",(0,o.yg)("img",{alt:"example of plotted code",src:r(9091).A,width:"1179",height:"1600"})),(0,o.yg)("h2",{id:"plotter-preview"},"Plotter Preview"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"preview screenshot",src:r(5515).A,width:"640",height:"480"})),(0,o.yg)("h2",{id:"code"},"Code"),(0,o.yg)("admonition",{type:"warning"},(0,o.yg)("p",{parentName:"admonition"},"This code may or may not run and is intended more as a reference. Additionally, it was most likely not written with the latest version of the library. To ensure compatibility, check the date of this post against the ",(0,o.yg)("a",{parentName:"p",href:"https://pypi.org/project/gcode2dplotterart/#history"},"version history")," and install the corresponding version.")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-python"},'from gcode2dplotterart import Plotter2D\nfrom random import randrange, shuffle\nimport math\nfrom typing import Dict, List, Union\nimport time\n\nLINE_WIDTH = 2.5\n\nCOLORS = [\n    {"title": "blue1", "color": "#A2FFF8"},\n    {"title": "pink2", "color": "#FF0096"},\n    {"title": "purple2", "color": "#AD00FF"},\n    {"title": "grey1", "color": "#E9E9E9"},\n]\n\nplotter = Plotter2D(\n    title="Josef Albers Homage",\n    x_min=0,\n    x_max=200,\n    y_min=0,\n    y_max=200,\n    feed_rate=10000,\n)\n\nshuffle(COLORS)\ncolor_choices = COLORS[0:4]\n\nfor color in color_choices:\n    plotter.add_layer(\n        title=color["title"],\n        color=color["color"],\n        line_width=LINE_WIDTH,\n    )\n\nSIDE_PADDING = int(plotter.width * 0.2)\n\nx_center = (plotter.x_max - plotter.x_min) / 2\ny_center = randrange(\n    int(plotter.y_min) + SIDE_PADDING, int(plotter.y_max) - SIDE_PADDING\n)\n\nvertical_angle = math.degrees(math.atan(int(plotter.width / 2) / (y_center)))\n\nsquare_side_length_percentages = [0.4, 0.7, 0.9, 1]\n\nsquare_side_lengths = [\n    int(plotter.width * percentage) for percentage in square_side_length_percentages\n]\nsorted(square_side_lengths)\n\ncurrent_side_length = LINE_WIDTH\nfor index, color in enumerate(color_choices):\n    threshold_side_length = square_side_lengths[index]\n\n    while current_side_length < threshold_side_length:\n        x_left_of_center = current_side_length / 2\n        y_below_center = x_left_of_center / math.tan(math.radians(vertical_angle))\n\n        x_start = x_center - x_left_of_center\n        y_start = y_center - y_below_center\n\n        x_end = x_start + current_side_length\n        y_end = y_start + current_side_length\n\n        plotter.layers[color["title"]].add_rectangle(\n            x_start=x_start,\n            y_start=y_start,\n            x_end=x_end,\n            y_end=y_end,\n        )\n\n        current_side_length += LINE_WIDTH\n\nplotter.preview()\nplotter.save()\n')))}g.isMDXComponent=!0},9380:(e,t,r)=>{r.d(t,{A:()=>n});const n=r.p+"assets/images/example1-3bffde3fe3dd10765bea653417a941d8.jpg"},9091:(e,t,r)=>{r.d(t,{A:()=>n});const n=r.p+"assets/images/example2-a1bbc670330865ef352e368df603ea06.jpg"},5515:(e,t,r)=>{r.d(t,{A:()=>n});const n=r.p+"assets/images/preview-e69659d7337763f03d6d9dd505005402.png"}}]);