"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[64],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>m});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",_={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),g=a,m=d["".concat(s,".").concat(g)]||d[g]||_[g]||o;return t?r.createElement(m,i(i({ref:n},c),{},{components:t})):r.createElement(m,i({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},1594:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>_,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=t(9668),a=(t(6540),t(5680));const o={description:"Convert image to just a few distinct colors and then diagonally cluster points into lines.",image:"/img/gallery/id/foo.jpg"},i="2025-01-18 Diagonal Lines",l={unversionedId:"gallery/2025_01_18_diagonal_lines",id:"gallery/2025_01_18_diagonal_lines",title:"2025-01-18 Diagonal Lines",description:"Convert image to just a few distinct colors and then diagonally cluster points into lines.",source:"@site/docs/gallery/2025_01_18_diagonal_lines.mdx",sourceDirName:"gallery",slug:"/gallery/2025_01_18_diagonal_lines",permalink:"/gcode2dplotterart/docs/gallery/2025_01_18_diagonal_lines",draft:!1,editUrl:"https://github.com/TravisBumgarner/gcode2dplotterart/tree/main/gcode2dplotterart-website/docs/gallery/2025_01_18_diagonal_lines.mdx",tags:[],version:"current",frontMatter:{description:"Convert image to just a few distinct colors and then diagonally cluster points into lines.",image:"/img/gallery/id/foo.jpg"},sidebar:"tutorialSidebar",previous:{title:"2023-12-09 Bayer Pattern CMYK",permalink:"/gcode2dplotterart/docs/gallery/2023-12-09_bayer_patterns_cmyk"},next:{title:"2025-02-06 Cascading Triangles",permalink:"/gcode2dplotterart/docs/gallery/2025_02_06_cascading_triangles"}},s={},p=[{value:"Description",id:"description",level:2},{value:"Images",id:"images",level:2},{value:"Inputs",id:"inputs",level:2},{value:"Plotter Preview",id:"plotter-preview",level:2},{value:"Code",id:"code",level:2}],c={toc:p},d="wrapper";function _(e){let{components:n,...o}=e;return(0,a.yg)(d,(0,r.A)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"2025-01-18-diagonal-lines"},"2025-01-18 Diagonal Lines"),(0,a.yg)("h2",{id:"description"},"Description"),(0,a.yg)("p",null,"Convert image to just a few distinct colors and then diagonally cluster points into lines."),(0,a.yg)("h2",{id:"images"},"Images"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"example of plotted code",src:t(6905).A,width:"1808",height:"1868"}),"\n",(0,a.yg)("img",{alt:"example of plotted code",src:t(4388).A,width:"2000",height:"1335"}),"\n",(0,a.yg)("img",{alt:"plotter adaptor",src:t(99).A,width:"1335",height:"2000"}),"\n",(0,a.yg)("img",{alt:"example of plotted code",src:t(6686).A,width:"2000",height:"1335"}),"\n",(0,a.yg)("img",{alt:"plotter adaptor",src:t(1773).A,width:"1335",height:"2000"})),(0,a.yg)("h2",{id:"inputs"},"Inputs"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"sample photo",src:t(9609).A,width:"2048",height:"2048"})),(0,a.yg)("h2",{id:"plotter-preview"},"Plotter Preview"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"preview screenshot",src:t(1441).A,width:"1140",height:"1120"})),(0,a.yg)("h2",{id:"code"},"Code"),(0,a.yg)("admonition",{type:"warning"},(0,a.yg)("p",{parentName:"admonition"},"This code may or may not run and is intended more as a reference. Additionally, it was most likely not written with the latest version of the library. To ensure compatibility, check the date of this post against the ",(0,a.yg)("a",{parentName:"p",href:"https://pypi.org/project/gcode2dplotterart/#history"},"version history")," and install the corresponding version.")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'# Take a photo, process it into N buckets where each bucket has roughly the \n# same number of pixels.\nfrom random import shuffle\nfrom gcode2dplotterart import Plotter3D\nfrom gcode2dplotterart.experimental_photo_utils import (\n    load_image,\n    resize_image,\n    grayscale_image,\n    bucket_image_even_pixel_count,\n)\n\nimage_path = "./test.jpeg"\n\nGAP_BETWEEN_DIAGONALS = 3\nGAP_BETWEEN_COLINEAR_LINES = 1\n\nX_MIN = 0\nX_MAX = 180\nY_MIN = 40\nY_MAX = 230\nZ_PLOTTING_HEIGHT = 0\nZ_NAVIGATION_HEIGHT = 4\nPLOTTER_WIDTH = X_MAX - X_MIN\nPLOTTER_HEIGHT = Y_MAX - Y_MIN\nOFFSET_X = 0\nOFFSET_Y = 0\n\n\nLAYERS = [\n    # 33\n    {\n        "title": "darkgrey",\n        "color": "darkgrey",\n        "line_width": 1.0,\n    },\n    # 40\n    {\n        "title": "cyan",\n        "color": "cyan",\n        "line_width": 1.0,\n    },\n    # 18\n    # 15\n    {\n        "title": "magenta",\n        "color": "magenta",\n        "line_width": 1.0,\n    },\n    {\n        "title": "yellow",\n        "color": "yellow",\n        "line_width": 1.0,\n    },\n]\n\nshuffle(LAYERS)\n\n\nimage = load_image(image_path, preview=True)\nimage = resize_image(\n    image, max_width=PLOTTER_WIDTH, max_height=PLOTTER_HEIGHT, preview=True\n)\nprint("max dimensions", PLOTTER_WIDTH, PLOTTER_HEIGHT)\nprint("resized to", image.shape)\nimage = grayscale_image(image, method="luminosity", preview=True)\nimage = bucket_image_even_pixel_count(\n    image, layer_count=len(LAYERS), preview=True\n)\n\n\nplotter = Plotter3D(\n    title="Diagonal Lines",\n    x_min=X_MIN,\n    x_max=X_MAX,\n    y_min=Y_MIN,\n    y_max=Y_MAX,\n    z_plotting_height=Z_PLOTTING_HEIGHT,\n    z_navigation_height=Z_NAVIGATION_HEIGHT,\n    feed_rate=10000,\n    output_directory="./output",\n    handle_out_of_bounds="Error",\n    return_home_before_plotting=True,\n)\n\nfor layer in LAYERS:\n    plotter.add_layer(\n        layer["title"], color=layer["color"], line_width=layer["line_width"]\n    )\n\nrows, cols = image.shape[:2]\n\n\ndef is_point_in_bounds(x, y):\n    return x >= 0 and x < cols and y >= 0 and y < rows\n\n\ndef create_path(start_x, start_y):\n    path = []\n    x = start_x\n    y = start_y\n    while is_point_in_bounds(x, y):\n        path.append((y, x))\n        x += 1\n        y -= 1\n    return path\n\n\npaths: list[tuple[int, int]] = []\nstart_col = 0\nlast_row = 0\nfor row in range(0, rows, GAP_BETWEEN_DIAGONALS):\n    paths.append(create_path(start_col, row))\n    last_row = row\n\n# This should take care of the gap between the last row and the first column.\ndelta = abs(last_row - rows) - 1\nprint(f"Delta: {delta}")\n\n# # Process origin at row n\nstart_row = rows - 1\nfor col in range(delta, cols, GAP_BETWEEN_DIAGONALS):\n    paths.append(create_path(col, start_row))\n\n\nfor path in paths:\n    line_start = path[0]\n    color = LAYERS[image[line_start]]["title"]\n    index = 0\n    while index < len(path):\n        point = path[index]\n        current_color = LAYERS[image[point]]["title"]\n        if current_color == color:\n            index += 1\n\n            if index >= len(path):\n                row_start, col_start = line_start\n                row_end, col_end = path[-1]\n                plotter.layers[color].add_line(\n                    col_start + X_MIN + OFFSET_X,\n                    Y_MAX - row_start + OFFSET_Y,\n                    col_end + X_MIN + OFFSET_X,\n                    Y_MAX - row_end + OFFSET_Y,\n                )\n                break\n            continue\n        else:\n            row_start, col_start = line_start\n            row_end, col_end = point\n            plotter.layers[color].add_line(\n                col_start + X_MIN + OFFSET_X,\n                Y_MAX - row_start + OFFSET_Y,\n                col_end + X_MIN + OFFSET_X,\n                Y_MAX - row_end + OFFSET_Y,\n            )\n            index += GAP_BETWEEN_COLINEAR_LINES\n            if index >= len(path):\n                row_start, col_start = line_start\n                row_end, col_end = path[-1]\n                plotter.layers[color].add_line(\n                    col_start + X_MIN + OFFSET_X,\n                    Y_MAX - row_start + OFFSET_Y,\n                    col_end + X_MIN + OFFSET_X,\n                    Y_MAX - row_end + OFFSET_Y,\n                )\n                break\n            point = path[index]\n            color = LAYERS[image[point]]["title"]\n            line_start = point\n\nplotter.preview()\nplotter.save()\n\n')))}_.isMDXComponent=!0},6905:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/example1-76b1a165efffcaa9b54031aabdf6e9b7.avif"},4388:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/example2-0184727585aacd1f3e230014f7ab8d38.avif"},99:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/example3-45bdfede071afaf87ab0700c1a09ba4c.avif"},6686:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/example4-86a18f3dc267a11e110cb2e688855953.avif"},1773:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/example5-29f2084d764a44e49c770428df907754.avif"},9609:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/input-31f900d0dd3301883038f7b670b8880a.jpg"},1441:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/preview-e1cb2f5c8a8a4ccfc16ef3321ed6a293.png"}}]);