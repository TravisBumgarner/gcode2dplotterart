"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4880],{3401:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/example1-bbd2c441c64c12a9d53e9ac9c478d133.jpg"},8316:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/preview-695dd0887e515decd37ce026602b22c5.png"},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(6540);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}},9735:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>_,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"gallery/2023-11-28_josef_albers_recursive_homage","title":"2023-11-28 Josef Albers Recursive Homage","description":"An homage to Josef Albers, recursively.","source":"@site/docs/gallery/2023-11-28_josef_albers_recursive_homage.mdx","sourceDirName":"gallery","slug":"/gallery/2023-11-28_josef_albers_recursive_homage","permalink":"/gcode2dplotterart/docs/gallery/2023-11-28_josef_albers_recursive_homage","draft":false,"unlisted":false,"editUrl":"https://github.com/TravisBumgarner/gcode2dplotterart/tree/main/gcode2dplotterart-website/docs/gallery/2023-11-28_josef_albers_recursive_homage.mdx","tags":[],"version":"current","frontMatter":{"description":"An homage to Josef Albers, recursively.","image":"/img/gallery/2023-11-28_josef_albers_recursive_homage/example1.jpg"},"sidebar":"tutorialSidebar","previous":{"title":"2023-11-25 Bubbles","permalink":"/gcode2dplotterart/docs/gallery/2023-11-25_Bubbles"},"next":{"title":"2023-12-06 Happy Little Accident","permalink":"/gcode2dplotterart/docs/gallery/2023-12-06_happy_little_accident"}}');var o=t(4848),s=t(8453);const i={description:"An homage to Josef Albers, recursively.",image:"/img/gallery/2023-11-28_josef_albers_recursive_homage/example1.jpg"},l="2023-11-28 Josef Albers Recursive Homage",a={},d=[{value:"Description",id:"description",level:2},{value:"Images",id:"images",level:2},{value:"Plotter Preview",id:"plotter-preview",level:2},{value:"Code",id:"code",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"2023-11-28-josef-albers-recursive-homage",children:"2023-11-28 Josef Albers Recursive Homage"})}),"\n",(0,o.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"An homage to Josef Albers, recursively."}),"\n",(0,o.jsx)(n.h2,{id:"images",children:"Images"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"example of plotted code",src:t(3401).A+"",width:"2000",height:"1494"})}),"\n",(0,o.jsx)(n.h2,{id:"plotter-preview",children:"Plotter Preview"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"preview screenshot",src:t(8316).A+"",width:"640",height:"480"})}),"\n",(0,o.jsx)(n.h2,{id:"code",children:"Code"}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsxs)(n.p,{children:["This code may or may not run and is intended more as a reference. Additionally, it was most likely not written with the latest version of the library. To ensure compatibility, check the date of this post against the ",(0,o.jsx)(n.a,{href:"https://pypi.org/project/gcode2dplotterart/#history",children:"version history"})," and install the corresponding version."]})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from gcode2dplotterart import Plotter2D\nfrom random import randrange, shuffle\nimport math\n\n\nLINE_WIDTH = 2.5\n\nCOLORS = [\n    {"title": "color1", "color": "darkslategrey"},\n    {"title": "color2", "color": "silver"},\n    {"title": "color3", "color": "cornsilk"},\n    {"title": "color4", "color": "tan"},\n]\n\nplotter = Plotter2D(\n    title="Josef Albers Homage",\n    x_min=0,\n    x_max=250,\n    y_min=0,\n    y_max=180,\n    feed_rate=10000,\n)\n\nDONT_PLOT_LAYER = {\n    "title": "DONT PLOT",\n    "color": "#FFFFFF",\n    "line_width": LINE_WIDTH,\n}\nplotter.add_layer(**DONT_PLOT_LAYER)\n\nfor color in COLORS:\n    plotter.add_layer(\n        title=color["title"],\n        color=color["color"],\n        line_width=LINE_WIDTH,\n    )\n\n# Should be less than 100 so that the last square can be one later on.\nSIDE_LENGTH_PERCENTAGE_CHOICES = [i / 100 for i in range(10, 99, 20)]\n\n\ndef josef_albers(x_min: float, y_min: float, side_length: float):\n    colors = COLORS.copy()\n\n    # Append some number of white layers.\n    for i in range(randrange(0, 3)):\n        colors.append(DONT_PLOT_LAYER)\n\n    shuffle(colors)\n\n    side_padding = LINE_WIDTH * 5\n    x_center = x_min + side_length / 2\n    y_center = randrange(\n        int(y_min + side_padding), int(y_min + side_length - side_padding)\n    )\n\n    vertical_angle = math.degrees(math.atan(int(side_length / 2) / (y_center - y_min)))\n\n    shuffle(SIDE_LENGTH_PERCENTAGE_CHOICES)\n    square_side_length_percentages = SIDE_LENGTH_PERCENTAGE_CHOICES[: len(colors) - 1]\n    square_side_length_percentages.append(1)\n\n    square_side_lengths = sorted(\n        [int(side_length * percentage) for percentage in square_side_length_percentages]\n    )\n\n    current_side_length = LINE_WIDTH\n    for index, color in enumerate(colors):\n        threshold_side_length = square_side_lengths[index]\n\n        while current_side_length < threshold_side_length:\n            x_left_of_center = current_side_length / 2\n            y_below_center = x_left_of_center / math.tan(math.radians(vertical_angle))\n            x_start = x_center - x_left_of_center\n            y_start = y_center - y_below_center\n\n            x_end = x_start + current_side_length\n            y_end = y_start + current_side_length\n\n            plotter.layers[color["title"]].add_rectangle(\n                x_start=x_start,\n                y_start=y_start,\n                x_end=x_end,\n                y_end=y_end,\n            )\n\n            current_side_length += LINE_WIDTH\n\n\nSIDE_LENGTH = 50\n\nfor x in range(0, plotter.width - SIDE_LENGTH, SIDE_LENGTH + 5):\n    for y in range(0, plotter.height - SIDE_LENGTH, SIDE_LENGTH + 5):\n        josef_albers(x, y, SIDE_LENGTH)\n\nplotter.preview()\nplotter.save()\n'})})]})}function _(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);