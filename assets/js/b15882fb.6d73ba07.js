"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[677],{5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>m});var r=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(n),y=o,m=d["".concat(p,".").concat(y)]||d[y]||g[y]||a;return n?r.createElement(m,l(l({ref:t},u),{},{components:n})):r.createElement(m,l({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=y;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},71:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>g,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=n(9668),o=(n(6540),n(5680));const a={},l="Plotter2D",i={unversionedId:"api/Plotter2D",id:"api/Plotter2D",title:"Plotter2D",description:"Plotter2D is a 2D plotter for creating artwork using G-code. This class should be used with a 2D plotter.",source:"@site/docs/api/Plotter2D.mdx",sourceDirName:"api",slug:"/api/Plotter2D",permalink:"/gcode2dplotterart/docs/api/Plotter2D",draft:!1,editUrl:"https://github.com/TravisBumgarner/gcode2dplotterart/tree/main/gcode2dplotterart-website/docs/api/Plotter2D.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Layer3D",permalink:"/gcode2dplotterart/docs/api/Layer3D"},next:{title:"Plotter3D",permalink:"/gcode2dplotterart/docs/api/Plotter3D"}},p={},s=[{value:"<strong>init</strong>",id:"init",level:2},{value:"add_layer",id:"add_layer",level:2},{value:"get_min_and_max_points",id:"get_min_and_max_points",level:2},{value:"get_plotting_data",id:"get_plotting_data",level:2},{value:"is_point_in_bounds",id:"is_point_in_bounds",level:2},{value:"preview",id:"preview",level:2},{value:"save",id:"save",level:2}],u={toc:s},d="wrapper";function g(e){let{components:t,...n}=e;return(0,o.yg)(d,(0,r.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"plotter2d"},"Plotter2D"),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"Plotter2D")," is a 2D plotter for creating artwork using G-code. This class should be used with a 2D plotter."),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"Plotter2D")," extends from the abstract class ",(0,o.yg)("inlineCode",{parentName:"p"},"Plotter"),"."),(0,o.yg)("h2",{id:"init"},(0,o.yg)("strong",{parentName:"h2"},"init")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-python"},"__init__(\nself, title: str, x_min: float, x_max: float, y_min: float, y_max: float, feed_rate: float, handle_out_of_bounds: Union[Literal['Warning'], Literal['Error']] = 'Warning', output_directory: str = './output', include_comments: bool = True, return_home_before_plotting: bool = True )\n ->  None\n")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Args:")," "),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"title (str) : The title of the work of art."),(0,o.yg)("li",{parentName:"ul"},"x_min (float) : The minimum X-coordinate of the plotter."),(0,o.yg)("li",{parentName:"ul"},"y_min (float) : The minimum Y-coordinate of the plotter."),(0,o.yg)("li",{parentName:"ul"},"x_max (float) : The maximum X-coordinate of the plotter."),(0,o.yg)("li",{parentName:"ul"},"y_max (float) : The maximum Y-coordinate of the plotter."),(0,o.yg)("li",{parentName:"ul"},"feed_rate (float) : The ",(0,o.yg)("a",{parentName:"li",href:"https://travisbumgarner.github.io/gcode2dplotterart/docs/documentation/terminology#feed-rate"},"feed rate"),", for the plotter."),(0,o.yg)("li",{parentName:"ul"},"handle_out_of_bounds (",(0,o.yg)("inlineCode",{parentName:"li"},"Warning")," | ",(0,o.yg)("inlineCode",{parentName:"li"},"Error"),", optional):             How to handle out-of-bounds points.             ",(0,o.yg)("inlineCode",{parentName:"li"},"Warning")," will print a warning, skip the point, and continue.             ",(0,o.yg)("inlineCode",{parentName:"li"},"Error")," will throw an error and stop.             Defaults to ",(0,o.yg)("inlineCode",{parentName:"li"},"Warning"),"."),(0,o.yg)("li",{parentName:"ul"},"output_directory (str, optional) : The directory where G-code files will be saved. Defaults to ",(0,o.yg)("inlineCode",{parentName:"li"},"./output"),"."),(0,o.yg)("li",{parentName:"ul"},"include_comments (bool, optional) : Whether to include comments in the G-Code files. Useful for learning about G-Code and debugging.\nDefaults to ",(0,o.yg)("inlineCode",{parentName:"li"},"True"),"."),(0,o.yg)("li",{parentName:"ul"},"return_home_before_plotting (bool, optional) : Whether to return the plotter to the home position before plotting. Defaults to ",(0,o.yg)("inlineCode",{parentName:"li"},"True"),".             Can cause issues if plotter doesn't support returning to the home position.")),(0,o.yg)("h2",{id:"add_layer"},"add_layer"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-python"},"add_layer(\nself, title: str, color: Optional[str] = None, line_width: float = 2.0, preview_only: bool = False )\n ->  gcode2dplotterart.layer.Layer2D.Layer2D\n")),(0,o.yg)("p",null,"Add a new layer to the plotter."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Args:")," "),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"title (str) : The title of the layer. Used when saving a layer to G-Code."),(0,o.yg)("li",{parentName:"ul"},"color (str) : A hex color (such as ",(0,o.yg)("inlineCode",{parentName:"li"},"#00FF00"),") or human-readable color name\n(see ",(0,o.yg)("a",{parentName:"li",href:"https://matplotlib.org/stable/gallery/color/named_colors.html#css-colors"},"MatplotLib"),"\nfor a list of colors). Used with the ",(0,o.yg)("inlineCode",{parentName:"li"},"preview")," method. Defaults to a random color if not provided."),(0,o.yg)("li",{parentName:"ul"},"line_width (Optional","[float]",") : The width of the line to be plotted. Used with the ",(0,o.yg)("inlineCode",{parentName:"li"},"preview")," method. Defaults to",(0,o.yg)("inlineCode",{parentName:"li"},"2.0"),"."),(0,o.yg)("li",{parentName:"ul"},"preview_only (bool) : Whether the layer is a preview layer. Preview layers show the\nplotter head in motion but do not come in contact with\n",(0,o.yg)("a",{parentName:"li",href:"https://travisbumgarner.github.io/gcode2dplotterart/docs/documentation/terminology#feed-rate"},"plotting surface"),". Defaults to ",(0,o.yg)("inlineCode",{parentName:"li"},"False"),".")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Returns:")," "),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Layer : The newly created ",(0,o.yg)("a",{parentName:"li",href:"https://travisbumgarner.github.io/gcode2dplotterart/docs/documentation/terminology#layer"},"layer"),".\nAllows for chaining of the layer's add methods.")),(0,o.yg)("h2",{id:"get_min_and_max_points"},"get_min_and_max_points"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-python"},"get_min_and_max_points(\nself )\n ->  Dict[Literal['x_min', 'y_min', 'x_max', 'y_max'], float]\n")),(0,o.yg)("p",null,"Find the min and max plot points of the plotter."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Returns:")," "),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"dict : {x_min (float), y_min (float), x_max (float), y_max (float)}\nA dictionary containing the min and max plot points of the plotter.")),(0,o.yg)("h2",{id:"get_plotting_data"},"get_plotting_data"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-python"},"get_plotting_data(\nself )\n ->  Dict[str, Dict[str, List[str]]]\n")),(0,o.yg)("p",null,"Get current plotting data."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Returns:")," "),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},'dict: {"layer" : {"setup": [], "plotting": [], "teardown": []}}\nA dictionary of dictionaries containing\n',(0,o.yg)("a",{parentName:"li",href:"https://travisbumgarner.github.io/gcode2dplotterart/docs/documentation/terminology#instruction-phase"},"instruction phases")," - setup, plotting,\nand teardown as an array of G-Code instruction strings per layer. Mostly used for testing purposes.")),(0,o.yg)("h2",{id:"is_point_in_bounds"},"is_point_in_bounds"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-python"},"is_point_in_bounds(\nself, x: float, y: float )\n ->  bool\n")),(0,o.yg)("p",null,"Whether the point to be plotted is within the plotter bounds."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Args:")," "),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"x (float) : The x-coordinate of the point to be plotted."),(0,o.yg)("li",{parentName:"ul"},"y (float) : The y-coordinate of the point to be plotted.")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Returns:")," "),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"bool : Whether the point to be plotted is within the plotter bounds.")),(0,o.yg)("h2",{id:"preview"},"preview"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-python"},"preview(\nself, show_entire_plotting_area: bool = True )\n ->  None\n")),(0,o.yg)("p",null,"Generate a preview image of the plotter's layers. Layers will be plotted in the order they've been added to the ",(0,o.yg)("inlineCode",{parentName:"p"},"Plotter"),".\nOnly looks at instructions during the ",(0,o.yg)("inlineCode",{parentName:"p"},"plotting")," phase."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Args:")," "),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"show_entire_plotting_area (bool, optional): Whether to show the entire plotting area or just the\nsize of the art to be plotted. Defaults to ",(0,o.yg)("inlineCode",{parentName:"li"},"True"),".")),(0,o.yg)("h2",{id:"save"},"save"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-python"},"save(\nself, clear_output_before_save: bool = True, include_layer_number: bool = True )\n ->  None\n")),(0,o.yg)("p",null,"Save all the layers to the output directory defined by the ",(0,o.yg)("inlineCode",{parentName:"p"},"output_directory")," Plotter param. Each layer will be\nsaved as an individual file with the filename defined by ",(0,o.yg)("inlineCode",{parentName:"p"},"{layer_number}_{layer_title}.gcode"),"."),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Args:")," "),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"clear_output_before_save (bool, optional): Whether to remove all files from the artwork output directory\n(defined as ",(0,o.yg)("inlineCode",{parentName:"li"},"[output_directory]/[title]"),") before saving. Defaults to ",(0,o.yg)("inlineCode",{parentName:"li"},"True"),"."),(0,o.yg)("li",{parentName:"ul"},"include_layer_number (bool, optional): Whether to prepend filename with ",(0,o.yg)("inlineCode",{parentName:"li"},"layer_number"),". Defaults to ",(0,o.yg)("inlineCode",{parentName:"li"},"True"),".")))}g.isMDXComponent=!0}}]);