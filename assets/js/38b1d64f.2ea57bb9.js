"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[877],{2167:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>_,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"gallery/2025_02_10_256_unique_cmyk_boxes","title":"2025-02-10 256 Unique CMYK Boxes","description":"Create 256 unique CMYK boxes.","source":"@site/docs/gallery/2025_02_10_256_unique_cmyk_boxes.mdx","sourceDirName":"gallery","slug":"/gallery/2025_02_10_256_unique_cmyk_boxes","permalink":"/gcode2dplotterart/docs/gallery/2025_02_10_256_unique_cmyk_boxes","draft":false,"unlisted":false,"editUrl":"https://github.com/TravisBumgarner/gcode2dplotterart/tree/main/gcode2dplotterart-website/docs/gallery/2025_02_10_256_unique_cmyk_boxes.mdx","tags":[],"version":"current","frontMatter":{"description":"Create 256 unique CMYK boxes.","image":"/img/gallery/2025_02_10_256_unique_cmyk_boxes/1.avif"},"sidebar":"tutorialSidebar","previous":{"title":"2025-02-06 Cascading Triangles","permalink":"/gcode2dplotterart/docs/gallery/2025_02_06_cascading_triangles"},"next":{"title":"2025-02-10 Juana and Nira","permalink":"/gcode2dplotterart/docs/gallery/2025_02_10_juana_and_nira"}}');var o=t(4848),r=t(8453);const a={description:"Create 256 unique CMYK boxes.",image:"/img/gallery/2025_02_10_256_unique_cmyk_boxes/1.avif"},l="2025-02-10 256 Unique CMYK Boxes",s={},c=[{value:"Description",id:"description",level:2},{value:"Images",id:"images",level:2},{value:"Plotter Preview",id:"plotter-preview",level:2},{value:"Code",id:"code",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"2025-02-10-256-unique-cmyk-boxes",children:"2025-02-10 256 Unique CMYK Boxes"})}),"\n",(0,o.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"Create 256 unique CMYK boxes."}),"\n",(0,o.jsx)(n.h2,{id:"images",children:"Images"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"example of plotted code",src:t(9903).A+"",width:"1995",height:"2000"})}),"\n",(0,o.jsx)(n.h2,{id:"plotter-preview",children:"Plotter Preview"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"preview screenshot",src:t(6897).A+"",width:"936",height:"852"})}),"\n",(0,o.jsx)(n.h2,{id:"code",children:"Code"}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsxs)(n.p,{children:["This code may or may not run and is intended more as a reference. Additionally, it was most likely not written with the latest version of the library. To ensure compatibility, check the date of this post against the ",(0,o.jsx)(n.a,{href:"https://pypi.org/project/gcode2dplotterart/#history",children:"version history"})," and install the corresponding version."]})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from gcode2dplotterart import Plotter3D\nfrom gcode2dplotterart import experimental_photo_utils\nimport random\nimport math\n\nX_MIN = 0\nX_MAX = 170\nY_MIN = 70\nY_MAX = 230\nZ_PLOTTING_HEIGHT = 0\nZ_NAVIGATION_HEIGHT = 4\n\nMAX_WIDTH = X_MAX - X_MIN\nMAX_HEIGHT = Y_MAX - Y_MIN\n\nplotter = Plotter3D(\n    title="Unique Boxes",\n    x_min=X_MIN,\n    x_max=X_MAX,\n    y_min=Y_MIN,\n    y_max=Y_MAX,\n    z_plotting_height=Z_PLOTTING_HEIGHT,\n    z_navigation_height=Z_NAVIGATION_HEIGHT,\n    feed_rate=10_000,  # Default feed rate\n    output_directory="./output",\n    handle_out_of_bounds="Warning",  # Warn if points are out of bounds\n)\n\nLAYERS = [\n    {\n        "title": "cyan",\n        "color": "#00ffff",\n        "line_width": 1,\n    },\n    {\n        "title": "magenta",\n        "color": "#ff00ff",\n        "line_width": 1,\n    },\n    {\n        "title": "yellow",\n        "color": "#ffff00",\n        "line_width": 1,\n    },\n    {\n        "title": "black",\n        "color": "#000000",\n        "line_width": 1,\n    },\n]\nCOLORS = [layer[\'title\'] for layer in LAYERS]\n\nfor layer in LAYERS:\n    plotter.add_layer(\n        layer["title"], color=layer["color"], line_width=layer["line_width"]\n    )\n\ndef draw_box(x, y, width, height, color1, color2, color3, color4):\n    plotter.layers[color1].add_line(X_MIN + x, Y_MIN + y, X_MIN + x + width, Y_MIN + y,)\n    plotter.layers[color2].add_line(X_MIN + x + width, Y_MIN + y, X_MIN + x + width, Y_MIN + y + height,)\n    plotter.layers[color3].add_line(X_MIN + x + width, Y_MIN + y + height, X_MIN + x, Y_MIN + y + height,)\n    plotter.layers[color4].add_line(X_MIN + x, Y_MIN + y + height, X_MIN + x, Y_MIN + y,)\n\n\ndef generate_colors():\n    return [\n        random.choice(COLORS) for _ in range(0,3)\n    ]\n\nSIDE_LENGTH = 7\n\ndef generate_all_color_combinations():\n    """Generate all possible unique combinations of 4 colors for a square\'s sides"""\n    all_combinations = []\n    for c1 in COLORS:\n        for c2 in COLORS:\n            for c3 in COLORS:\n                for c4 in COLORS:\n                    all_combinations.append((c1, c2, c3, c4))\n    random.shuffle(all_combinations)\n    return all_combinations\n\ndef main():\n    # Get all possible color combinations\n    all_combinations = generate_all_color_combinations()\n    print(len(all_combinations))\n    \n    # Calculate grid layout\n    box_count = len(all_combinations)  # Will be 256 (4^4)\n    grid_size = math.ceil(math.sqrt(box_count))\n    \n    # Calculate box spacing to fit all boxes\n    spacing = SIDE_LENGTH + 3  # Add 5 units of padding between boxes\n    \n    for idx, colors in enumerate(all_combinations):\n        # Calculate grid position\n        row = idx // grid_size\n        col = idx % grid_size\n        \n        # Calculate box position\n        x = col * spacing\n        y = row * spacing\n        \n        # Draw box with current color combination\n        draw_box(x, y, SIDE_LENGTH, SIDE_LENGTH, *colors)\n\nif __name__ == "__main__":\n    main()\n\nplotter.preview()\nplotter.save()\n'})})]})}function _(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},6897:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/preview-1685090a2cf11bbad6e218659db7634c.png"},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(6540);const o={},r=i.createContext(o);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},9903:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/1-b82e570016394e08df3c7bc697084049.avif"}}]);