"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[766],{5680:(e,n,r)=>{r.d(n,{xA:()=>s,yg:()=>f});var t=r(6540);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=t.createContext({}),d=function(e){var n=t.useContext(a),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},s=function(e){var n=d(e.components);return t.createElement(a.Provider,{value:n},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),g=d(r),p=o,f=g["".concat(a,".").concat(p)]||g[p]||u[p]||i;return r?t.createElement(f,l(l({ref:n},s),{},{components:r})):t.createElement(f,l({ref:n},s))}));function f(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,l=new Array(i);l[0]=p;var c={};for(var a in n)hasOwnProperty.call(n,a)&&(c[a]=n[a]);c.originalType=e,c[g]="string"==typeof e?e:o,l[1]=c;for(var d=2;d<i;d++)l[d]=r[d];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},6475:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var t=r(9668),o=(r(6540),r(5680));const i={sidebar_position:5,description:"Plot circles in a 2D grid where each row contains a donut of a single color and each column contains a circle enclosed in the donut of a single color. The result is a grid containing the unique combination of every color pair.",image:"/img/gallery/5_concentric_circles/example1.jpg"},l="2023-11-24 Concentric Circles",c={unversionedId:"gallery/concentric_circles",id:"gallery/concentric_circles",title:"2023-11-24 Concentric Circles",description:"Plot circles in a 2D grid where each row contains a donut of a single color and each column contains a circle enclosed in the donut of a single color. The result is a grid containing the unique combination of every color pair.",source:"@site/docs/gallery/5_concentric_circles.mdx",sourceDirName:"gallery",slug:"/gallery/concentric_circles",permalink:"/gcode2dplotterart/docs/gallery/concentric_circles",draft:!1,editUrl:"https://github.com/TravisBumgarner/gcode2dplotterart/tree/main/gcode2dplotterart-website/docs/gallery/5_concentric_circles.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,description:"Plot circles in a 2D grid where each row contains a donut of a single color and each column contains a circle enclosed in the donut of a single color. The result is a grid containing the unique combination of every color pair.",image:"/img/gallery/5_concentric_circles/example1.jpg"},sidebar:"tutorialSidebar",previous:{title:"2023-11-19 Wandering Lines",permalink:"/gcode2dplotterart/docs/gallery/wandering_lines"},next:{title:"2023-11-25 Bubbles",permalink:"/gcode2dplotterart/docs/gallery/Bubbles"}},a={},d=[{value:"Description",id:"description",level:2},{value:"Images",id:"images",level:2},{value:"Plotter Preview",id:"plotter-preview",level:2},{value:"Code",id:"code",level:2}],s={toc:d},g="wrapper";function u(e){let{components:n,...i}=e;return(0,o.yg)(g,(0,t.A)({},s,i,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"2023-11-24-concentric-circles"},"2023-11-24 Concentric Circles"),(0,o.yg)("h2",{id:"description"},"Description"),(0,o.yg)("p",null,"Plot circles in a 2D grid where each row contains a donut of a single color and each column contains a circle enclosed in the donut of a single color. The result is a grid containing the unique combination of every color pair. "),(0,o.yg)("h2",{id:"images"},"Images"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"example of plotted code",src:r(521).A,width:"1589",height:"1600"})),(0,o.yg)("h2",{id:"plotter-preview"},"Plotter Preview"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"preview screenshot",src:r(4556).A,width:"1504",height:"1312"})),(0,o.yg)("h2",{id:"code"},"Code"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},'from gcode2dplotterart import Plotter2D\n\nLINE_WIDTH = 1.0\n\nCOLORS = [\n    {"title": "1_red1", "color": "#FF4141"},\n    {"title": "2_orange1", "color": "#FF7700"},\n    {"title": "3_yellow1", "color": "#FFDB11"},\n    {"title": "4_green1", "color": "#A9FF00"},\n    {"title": "5_green2", "color": "#00E350"},\n    {"title": "6_blue1", "color": "#A2FFF8"},\n    {"title": "7_blue2", "color": "#0024FF"},\n    {"title": "8_blue3", "color": "#5D9DB4"},\n    {"title": "9_pink1", "color": "#FF91D2"},\n    {"title": "a_pink2", "color": "#FF0096"},\n    {"title": "b_purple1", "color": "#EABEFF"},\n    {"title": "c_purple2", "color": "#AD00FF"},\n    {"title": "d_grey1", "color": "#E9E9E9"},\n    {"title": "e_grey2", "color": "#B1B1B1"},\n    {"title": "f_grey3", "color": "#1E1E1E"},\n]\n\n# Create a plotter object\nplotter = Plotter2D(\n    title="Circles",\n    x_min=0,\n    x_max=290,\n    y_min=0,\n    y_max=210,\n    feed_rate=10000,\n)\n\nfor color in COLORS:\n    for ground in ["foreground", "background"]:\n        plotter.add_layer(\n            title=f"{ground}_{color[\'title\']}",\n            color=color["color"],\n            line_width=LINE_WIDTH,\n        )\n\nPLOTTER_CONSTRAINT = min(plotter.width, plotter.height)\n\nbounding_box = PLOTTER_CONSTRAINT / len(COLORS)\nradius = (bounding_box / 2) - 2  # Add a little padding\n\nINNER_CIRCLE_RADIUS = radius * 0.5\n\nprint\n\nfor foreground_index in range(len(COLORS)):\n    for background_index in range(len(COLORS)):\n        # Experimenting below with adding fill.\n\n        # offset centers so they\'re not on edge of plotter\n        foreground_offset = foreground_index + 0.5\n        background_offset = background_index + 0.5\n\n        remaining_radius = radius\n        print(remaining_radius)\n        while remaining_radius > INNER_CIRCLE_RADIUS:\n            plotter.layers[\n                "background_" + COLORS[background_index]["title"]\n            ].add_circle(\n                x_center=bounding_box * foreground_offset,\n                y_center=bounding_box * background_offset,\n                radius=remaining_radius,\n            )\n            remaining_radius -= LINE_WIDTH\n\n        while remaining_radius > 0:\n            layer = (\n                "foreground_" + COLORS[foreground_index]["title"]\n                if foreground_index != background_index\n                else "background_" + COLORS[background_index]["title"]\n            )\n            plotter.layers[layer].add_circle(\n                x_center=bounding_box * foreground_offset,\n                y_center=bounding_box * background_offset,\n                radius=remaining_radius,\n            )\n            remaining_radius -= LINE_WIDTH\n        print(remaining_radius)\n\nplotter.preview()\n\nplotter.save(include_layer_number=False)\n')))}u.isMDXComponent=!0},521:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/example1-406194de156a5c36734a4c6020106c18.jpg"},4556:(e,n,r)=>{r.d(n,{A:()=>t});const t=r.p+"assets/images/preview-2df03b2ddad4c29f095ee26b1f066f58.png"}}]);